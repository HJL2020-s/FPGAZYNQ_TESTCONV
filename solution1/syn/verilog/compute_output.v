// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        weight_V_offset,
        m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY,
        m_axi_out_V_AWADDR,
        m_axi_out_V_AWID,
        m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID,
        m_axi_out_V_WREADY,
        m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST,
        m_axi_out_V_WID,
        m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY,
        m_axi_out_V_ARADDR,
        m_axi_out_V_ARID,
        m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID,
        m_axi_out_V_RREADY,
        m_axi_out_V_RDATA,
        m_axi_out_V_RLAST,
        m_axi_out_V_RID,
        m_axi_out_V_RUSER,
        m_axi_out_V_RRESP,
        m_axi_out_V_BVALID,
        m_axi_out_V_BREADY,
        m_axi_out_V_BRESP,
        m_axi_out_V_BID,
        m_axi_out_V_BUSER,
        out_V_offset,
        fm_in_buff_0_V_address0,
        fm_in_buff_0_V_ce0,
        fm_in_buff_0_V_q0,
        fm_in_buff_1_V_address0,
        fm_in_buff_1_V_ce0,
        fm_in_buff_1_V_q0,
        fm_in_buff_2_V_address0,
        fm_in_buff_2_V_ce0,
        fm_in_buff_2_V_q0,
        bias_buff_0_V_read,
        bias_buff_1_V_read,
        bias_buff_2_V_read,
        bias_buff_3_V_read,
        bias_buff_4_V_read,
        bias_buff_5_V_read,
        bias_buff_6_V_read,
        bias_buff_7_V_read,
        bias_buff_8_V_read,
        bias_buff_9_V_read,
        bias_buff_10_V_read,
        bias_buff_11_V_read,
        bias_buff_12_V_read,
        bias_buff_13_V_read,
        bias_buff_14_V_read,
        bias_buff_15_V_read,
        bias_buff_16_V_read,
        bias_buff_17_V_read,
        bias_buff_18_V_read,
        bias_buff_19_V_read,
        bias_buff_20_V_read,
        bias_buff_21_V_read,
        bias_buff_22_V_read,
        bias_buff_23_V_read,
        bias_buff_24_V_read,
        bias_buff_25_V_read,
        bias_buff_26_V_read,
        bias_buff_27_V_read,
        bias_buff_28_V_read,
        bias_buff_29_V_read,
        bias_buff_30_V_read,
        bias_buff_31_V_read,
        bias_buff_32_V_read,
        bias_buff_33_V_read,
        bias_buff_34_V_read,
        bias_buff_35_V_read,
        bias_buff_36_V_read,
        bias_buff_37_V_read,
        bias_buff_38_V_read,
        bias_buff_39_V_read,
        bias_buff_40_V_read,
        bias_buff_41_V_read,
        bias_buff_42_V_read,
        bias_buff_43_V_read,
        bias_buff_44_V_read,
        bias_buff_45_V_read,
        bias_buff_46_V_read,
        bias_buff_47_V_read,
        bias_buff_48_V_read,
        bias_buff_49_V_read,
        bias_buff_50_V_read,
        bias_buff_51_V_read,
        bias_buff_52_V_read,
        bias_buff_53_V_read,
        bias_buff_54_V_read,
        bias_buff_55_V_read,
        bias_buff_56_V_read,
        bias_buff_57_V_read,
        bias_buff_58_V_read,
        bias_buff_59_V_read,
        bias_buff_60_V_read,
        bias_buff_61_V_read,
        bias_buff_62_V_read,
        bias_buff_63_V_read,
        row,
        col
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [15:0] m_axi_weight_V_WDATA;
output  [1:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [15:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [30:0] weight_V_offset;
output   m_axi_out_V_AWVALID;
input   m_axi_out_V_AWREADY;
output  [31:0] m_axi_out_V_AWADDR;
output  [0:0] m_axi_out_V_AWID;
output  [31:0] m_axi_out_V_AWLEN;
output  [2:0] m_axi_out_V_AWSIZE;
output  [1:0] m_axi_out_V_AWBURST;
output  [1:0] m_axi_out_V_AWLOCK;
output  [3:0] m_axi_out_V_AWCACHE;
output  [2:0] m_axi_out_V_AWPROT;
output  [3:0] m_axi_out_V_AWQOS;
output  [3:0] m_axi_out_V_AWREGION;
output  [0:0] m_axi_out_V_AWUSER;
output   m_axi_out_V_WVALID;
input   m_axi_out_V_WREADY;
output  [63:0] m_axi_out_V_WDATA;
output  [7:0] m_axi_out_V_WSTRB;
output   m_axi_out_V_WLAST;
output  [0:0] m_axi_out_V_WID;
output  [0:0] m_axi_out_V_WUSER;
output   m_axi_out_V_ARVALID;
input   m_axi_out_V_ARREADY;
output  [31:0] m_axi_out_V_ARADDR;
output  [0:0] m_axi_out_V_ARID;
output  [31:0] m_axi_out_V_ARLEN;
output  [2:0] m_axi_out_V_ARSIZE;
output  [1:0] m_axi_out_V_ARBURST;
output  [1:0] m_axi_out_V_ARLOCK;
output  [3:0] m_axi_out_V_ARCACHE;
output  [2:0] m_axi_out_V_ARPROT;
output  [3:0] m_axi_out_V_ARQOS;
output  [3:0] m_axi_out_V_ARREGION;
output  [0:0] m_axi_out_V_ARUSER;
input   m_axi_out_V_RVALID;
output   m_axi_out_V_RREADY;
input  [63:0] m_axi_out_V_RDATA;
input   m_axi_out_V_RLAST;
input  [0:0] m_axi_out_V_RID;
input  [0:0] m_axi_out_V_RUSER;
input  [1:0] m_axi_out_V_RRESP;
input   m_axi_out_V_BVALID;
output   m_axi_out_V_BREADY;
input  [1:0] m_axi_out_V_BRESP;
input  [0:0] m_axi_out_V_BID;
input  [0:0] m_axi_out_V_BUSER;
input  [28:0] out_V_offset;
output  [11:0] fm_in_buff_0_V_address0;
output   fm_in_buff_0_V_ce0;
input  [15:0] fm_in_buff_0_V_q0;
output  [11:0] fm_in_buff_1_V_address0;
output   fm_in_buff_1_V_ce0;
input  [15:0] fm_in_buff_1_V_q0;
output  [11:0] fm_in_buff_2_V_address0;
output   fm_in_buff_2_V_ce0;
input  [15:0] fm_in_buff_2_V_q0;
input  [15:0] bias_buff_0_V_read;
input  [15:0] bias_buff_1_V_read;
input  [15:0] bias_buff_2_V_read;
input  [15:0] bias_buff_3_V_read;
input  [15:0] bias_buff_4_V_read;
input  [15:0] bias_buff_5_V_read;
input  [15:0] bias_buff_6_V_read;
input  [15:0] bias_buff_7_V_read;
input  [15:0] bias_buff_8_V_read;
input  [15:0] bias_buff_9_V_read;
input  [15:0] bias_buff_10_V_read;
input  [15:0] bias_buff_11_V_read;
input  [15:0] bias_buff_12_V_read;
input  [15:0] bias_buff_13_V_read;
input  [15:0] bias_buff_14_V_read;
input  [15:0] bias_buff_15_V_read;
input  [15:0] bias_buff_16_V_read;
input  [15:0] bias_buff_17_V_read;
input  [15:0] bias_buff_18_V_read;
input  [15:0] bias_buff_19_V_read;
input  [15:0] bias_buff_20_V_read;
input  [15:0] bias_buff_21_V_read;
input  [15:0] bias_buff_22_V_read;
input  [15:0] bias_buff_23_V_read;
input  [15:0] bias_buff_24_V_read;
input  [15:0] bias_buff_25_V_read;
input  [15:0] bias_buff_26_V_read;
input  [15:0] bias_buff_27_V_read;
input  [15:0] bias_buff_28_V_read;
input  [15:0] bias_buff_29_V_read;
input  [15:0] bias_buff_30_V_read;
input  [15:0] bias_buff_31_V_read;
input  [15:0] bias_buff_32_V_read;
input  [15:0] bias_buff_33_V_read;
input  [15:0] bias_buff_34_V_read;
input  [15:0] bias_buff_35_V_read;
input  [15:0] bias_buff_36_V_read;
input  [15:0] bias_buff_37_V_read;
input  [15:0] bias_buff_38_V_read;
input  [15:0] bias_buff_39_V_read;
input  [15:0] bias_buff_40_V_read;
input  [15:0] bias_buff_41_V_read;
input  [15:0] bias_buff_42_V_read;
input  [15:0] bias_buff_43_V_read;
input  [15:0] bias_buff_44_V_read;
input  [15:0] bias_buff_45_V_read;
input  [15:0] bias_buff_46_V_read;
input  [15:0] bias_buff_47_V_read;
input  [15:0] bias_buff_48_V_read;
input  [15:0] bias_buff_49_V_read;
input  [15:0] bias_buff_50_V_read;
input  [15:0] bias_buff_51_V_read;
input  [15:0] bias_buff_52_V_read;
input  [15:0] bias_buff_53_V_read;
input  [15:0] bias_buff_54_V_read;
input  [15:0] bias_buff_55_V_read;
input  [15:0] bias_buff_56_V_read;
input  [15:0] bias_buff_57_V_read;
input  [15:0] bias_buff_58_V_read;
input  [15:0] bias_buff_59_V_read;
input  [15:0] bias_buff_60_V_read;
input  [15:0] bias_buff_61_V_read;
input  [15:0] bias_buff_62_V_read;
input  [15:0] bias_buff_63_V_read;
input  [31:0] row;
input  [31:0] col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg m_axi_out_V_AWVALID;
reg m_axi_out_V_WVALID;
reg m_axi_out_V_BREADY;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] trunc_ln124_fu_724_p1;
reg   [15:0] trunc_ln124_reg_1076;
wire   [15:0] trunc_ln124_1_fu_728_p1;
reg   [15:0] trunc_ln124_1_reg_1081;
wire   [6:0] ch_fu_740_p2;
reg   [6:0] ch_reg_1089;
wire    ap_CS_fsm_state6;
reg   [11:0] wt_buff_V_address0;
reg    wt_buff_V_ce0;
reg    wt_buff_V_we0;
wire   [15:0] wt_buff_V_q0;
reg    wt_buff_V_ce1;
wire   [15:0] wt_buff_V_q1;
reg   [13:0] fm_out_buff_V_address0;
reg    fm_out_buff_V_ce0;
reg    fm_out_buff_V_we0;
wire   [15:0] fm_out_buff_V_q0;
reg    fm_out_buff_V_ce1;
reg    fm_out_buff_V_we1;
wire   [15:0] fm_out_buff_V_q1;
wire    grp_compute4_fu_624_ap_start;
wire    grp_compute4_fu_624_ap_done;
wire    grp_compute4_fu_624_ap_idle;
wire    grp_compute4_fu_624_ap_ready;
wire   [11:0] grp_compute4_fu_624_fm_in_buff_0_V_address0;
wire    grp_compute4_fu_624_fm_in_buff_0_V_ce0;
wire   [11:0] grp_compute4_fu_624_fm_in_buff_1_V_address0;
wire    grp_compute4_fu_624_fm_in_buff_1_V_ce0;
wire   [11:0] grp_compute4_fu_624_fm_in_buff_2_V_address0;
wire    grp_compute4_fu_624_fm_in_buff_2_V_ce0;
wire   [11:0] grp_compute4_fu_624_wt_buff_V_address0;
wire    grp_compute4_fu_624_wt_buff_V_ce0;
wire   [11:0] grp_compute4_fu_624_wt_buff_V_address1;
wire    grp_compute4_fu_624_wt_buff_V_ce1;
wire   [13:0] grp_compute4_fu_624_fm_out_buff_V_address0;
wire    grp_compute4_fu_624_fm_out_buff_V_ce0;
wire    grp_compute4_fu_624_fm_out_buff_V_we0;
wire   [15:0] grp_compute4_fu_624_fm_out_buff_V_d0;
wire   [13:0] grp_compute4_fu_624_fm_out_buff_V_address1;
wire    grp_compute4_fu_624_fm_out_buff_V_ce1;
wire    grp_compute4_fu_624_fm_out_buff_V_we1;
wire   [15:0] grp_compute4_fu_624_fm_out_buff_V_d1;
wire    grp_store_output_fu_702_ap_start;
wire    grp_store_output_fu_702_ap_done;
wire    grp_store_output_fu_702_ap_idle;
wire    grp_store_output_fu_702_ap_ready;
wire    grp_store_output_fu_702_m_axi_out_V_AWVALID;
wire   [31:0] grp_store_output_fu_702_m_axi_out_V_AWADDR;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_AWID;
wire   [31:0] grp_store_output_fu_702_m_axi_out_V_AWLEN;
wire   [2:0] grp_store_output_fu_702_m_axi_out_V_AWSIZE;
wire   [1:0] grp_store_output_fu_702_m_axi_out_V_AWBURST;
wire   [1:0] grp_store_output_fu_702_m_axi_out_V_AWLOCK;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_AWCACHE;
wire   [2:0] grp_store_output_fu_702_m_axi_out_V_AWPROT;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_AWQOS;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_AWREGION;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_AWUSER;
wire    grp_store_output_fu_702_m_axi_out_V_WVALID;
wire   [63:0] grp_store_output_fu_702_m_axi_out_V_WDATA;
wire   [7:0] grp_store_output_fu_702_m_axi_out_V_WSTRB;
wire    grp_store_output_fu_702_m_axi_out_V_WLAST;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_WID;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_WUSER;
wire    grp_store_output_fu_702_m_axi_out_V_ARVALID;
wire   [31:0] grp_store_output_fu_702_m_axi_out_V_ARADDR;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_ARID;
wire   [31:0] grp_store_output_fu_702_m_axi_out_V_ARLEN;
wire   [2:0] grp_store_output_fu_702_m_axi_out_V_ARSIZE;
wire   [1:0] grp_store_output_fu_702_m_axi_out_V_ARBURST;
wire   [1:0] grp_store_output_fu_702_m_axi_out_V_ARLOCK;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_ARCACHE;
wire   [2:0] grp_store_output_fu_702_m_axi_out_V_ARPROT;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_ARQOS;
wire   [3:0] grp_store_output_fu_702_m_axi_out_V_ARREGION;
wire   [0:0] grp_store_output_fu_702_m_axi_out_V_ARUSER;
wire    grp_store_output_fu_702_m_axi_out_V_RREADY;
wire    grp_store_output_fu_702_m_axi_out_V_BREADY;
wire   [13:0] grp_store_output_fu_702_fm_out_buff_V_address0;
wire    grp_store_output_fu_702_fm_out_buff_V_ce0;
wire    grp_load_weight_fu_714_ap_start;
wire    grp_load_weight_fu_714_ap_done;
wire    grp_load_weight_fu_714_ap_idle;
wire    grp_load_weight_fu_714_ap_ready;
wire    grp_load_weight_fu_714_m_axi_weight_V_AWVALID;
wire   [31:0] grp_load_weight_fu_714_m_axi_weight_V_AWADDR;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_AWID;
wire   [31:0] grp_load_weight_fu_714_m_axi_weight_V_AWLEN;
wire   [2:0] grp_load_weight_fu_714_m_axi_weight_V_AWSIZE;
wire   [1:0] grp_load_weight_fu_714_m_axi_weight_V_AWBURST;
wire   [1:0] grp_load_weight_fu_714_m_axi_weight_V_AWLOCK;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_AWCACHE;
wire   [2:0] grp_load_weight_fu_714_m_axi_weight_V_AWPROT;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_AWQOS;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_AWREGION;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_AWUSER;
wire    grp_load_weight_fu_714_m_axi_weight_V_WVALID;
wire   [15:0] grp_load_weight_fu_714_m_axi_weight_V_WDATA;
wire   [1:0] grp_load_weight_fu_714_m_axi_weight_V_WSTRB;
wire    grp_load_weight_fu_714_m_axi_weight_V_WLAST;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_WID;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_WUSER;
wire    grp_load_weight_fu_714_m_axi_weight_V_ARVALID;
wire   [31:0] grp_load_weight_fu_714_m_axi_weight_V_ARADDR;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_ARID;
wire   [31:0] grp_load_weight_fu_714_m_axi_weight_V_ARLEN;
wire   [2:0] grp_load_weight_fu_714_m_axi_weight_V_ARSIZE;
wire   [1:0] grp_load_weight_fu_714_m_axi_weight_V_ARBURST;
wire   [1:0] grp_load_weight_fu_714_m_axi_weight_V_ARLOCK;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_ARCACHE;
wire   [2:0] grp_load_weight_fu_714_m_axi_weight_V_ARPROT;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_ARQOS;
wire   [3:0] grp_load_weight_fu_714_m_axi_weight_V_ARREGION;
wire   [0:0] grp_load_weight_fu_714_m_axi_weight_V_ARUSER;
wire    grp_load_weight_fu_714_m_axi_weight_V_RREADY;
wire    grp_load_weight_fu_714_m_axi_weight_V_BREADY;
wire   [11:0] grp_load_weight_fu_714_wt_buff_V_address0;
wire    grp_load_weight_fu_714_wt_buff_V_ce0;
wire    grp_load_weight_fu_714_wt_buff_V_we0;
wire   [15:0] grp_load_weight_fu_714_wt_buff_V_d0;
reg   [6:0] ch_0_reg_612;
wire    ap_CS_fsm_state7;
reg    grp_compute4_fu_624_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    grp_store_output_fu_702_ap_start_reg;
reg    grp_load_weight_fu_714_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_732_p3;
wire    ap_CS_fsm_state3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_compute4_fu_624_ap_start_reg = 1'b0;
#0 grp_store_output_fu_702_ap_start_reg = 1'b0;
#0 grp_load_weight_fu_714_ap_start_reg = 1'b0;
end

compute_output_wtg8j #(
    .DataWidth( 16 ),
    .AddressRange( 2352 ),
    .AddressWidth( 12 ))
wt_buff_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wt_buff_V_address0),
    .ce0(wt_buff_V_ce0),
    .we0(wt_buff_V_we0),
    .d0(grp_load_weight_fu_714_wt_buff_V_d0),
    .q0(wt_buff_V_q0),
    .address1(grp_compute4_fu_624_wt_buff_V_address1),
    .ce1(wt_buff_V_ce1),
    .q1(wt_buff_V_q1)
);

compute_output_fmhbi #(
    .DataWidth( 16 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
fm_out_buff_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fm_out_buff_V_address0),
    .ce0(fm_out_buff_V_ce0),
    .we0(fm_out_buff_V_we0),
    .d0(grp_compute4_fu_624_fm_out_buff_V_d0),
    .q0(fm_out_buff_V_q0),
    .address1(grp_compute4_fu_624_fm_out_buff_V_address1),
    .ce1(fm_out_buff_V_ce1),
    .we1(fm_out_buff_V_we1),
    .d1(grp_compute4_fu_624_fm_out_buff_V_d1),
    .q1(fm_out_buff_V_q1)
);

compute4 grp_compute4_fu_624(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute4_fu_624_ap_start),
    .ap_done(grp_compute4_fu_624_ap_done),
    .ap_idle(grp_compute4_fu_624_ap_idle),
    .ap_ready(grp_compute4_fu_624_ap_ready),
    .fm_in_buff_0_V_address0(grp_compute4_fu_624_fm_in_buff_0_V_address0),
    .fm_in_buff_0_V_ce0(grp_compute4_fu_624_fm_in_buff_0_V_ce0),
    .fm_in_buff_0_V_q0(fm_in_buff_0_V_q0),
    .fm_in_buff_1_V_address0(grp_compute4_fu_624_fm_in_buff_1_V_address0),
    .fm_in_buff_1_V_ce0(grp_compute4_fu_624_fm_in_buff_1_V_ce0),
    .fm_in_buff_1_V_q0(fm_in_buff_1_V_q0),
    .fm_in_buff_2_V_address0(grp_compute4_fu_624_fm_in_buff_2_V_address0),
    .fm_in_buff_2_V_ce0(grp_compute4_fu_624_fm_in_buff_2_V_ce0),
    .fm_in_buff_2_V_q0(fm_in_buff_2_V_q0),
    .wt_buff_V_address0(grp_compute4_fu_624_wt_buff_V_address0),
    .wt_buff_V_ce0(grp_compute4_fu_624_wt_buff_V_ce0),
    .wt_buff_V_q0(wt_buff_V_q0),
    .wt_buff_V_address1(grp_compute4_fu_624_wt_buff_V_address1),
    .wt_buff_V_ce1(grp_compute4_fu_624_wt_buff_V_ce1),
    .wt_buff_V_q1(wt_buff_V_q1),
    .bias_buff_0_V_read(bias_buff_0_V_read),
    .bias_buff_1_V_read(bias_buff_1_V_read),
    .bias_buff_2_V_read(bias_buff_2_V_read),
    .bias_buff_3_V_read(bias_buff_3_V_read),
    .bias_buff_4_V_read(bias_buff_4_V_read),
    .bias_buff_5_V_read(bias_buff_5_V_read),
    .bias_buff_6_V_read(bias_buff_6_V_read),
    .bias_buff_7_V_read(bias_buff_7_V_read),
    .bias_buff_8_V_read(bias_buff_8_V_read),
    .bias_buff_9_V_read(bias_buff_9_V_read),
    .bias_buff_10_V_read(bias_buff_10_V_read),
    .bias_buff_11_V_read(bias_buff_11_V_read),
    .bias_buff_12_V_read(bias_buff_12_V_read),
    .bias_buff_13_V_read(bias_buff_13_V_read),
    .bias_buff_14_V_read(bias_buff_14_V_read),
    .bias_buff_15_V_read(bias_buff_15_V_read),
    .bias_buff_16_V_read(bias_buff_16_V_read),
    .bias_buff_17_V_read(bias_buff_17_V_read),
    .bias_buff_18_V_read(bias_buff_18_V_read),
    .bias_buff_19_V_read(bias_buff_19_V_read),
    .bias_buff_20_V_read(bias_buff_20_V_read),
    .bias_buff_21_V_read(bias_buff_21_V_read),
    .bias_buff_22_V_read(bias_buff_22_V_read),
    .bias_buff_23_V_read(bias_buff_23_V_read),
    .bias_buff_24_V_read(bias_buff_24_V_read),
    .bias_buff_25_V_read(bias_buff_25_V_read),
    .bias_buff_26_V_read(bias_buff_26_V_read),
    .bias_buff_27_V_read(bias_buff_27_V_read),
    .bias_buff_28_V_read(bias_buff_28_V_read),
    .bias_buff_29_V_read(bias_buff_29_V_read),
    .bias_buff_30_V_read(bias_buff_30_V_read),
    .bias_buff_31_V_read(bias_buff_31_V_read),
    .bias_buff_32_V_read(bias_buff_32_V_read),
    .bias_buff_33_V_read(bias_buff_33_V_read),
    .bias_buff_34_V_read(bias_buff_34_V_read),
    .bias_buff_35_V_read(bias_buff_35_V_read),
    .bias_buff_36_V_read(bias_buff_36_V_read),
    .bias_buff_37_V_read(bias_buff_37_V_read),
    .bias_buff_38_V_read(bias_buff_38_V_read),
    .bias_buff_39_V_read(bias_buff_39_V_read),
    .bias_buff_40_V_read(bias_buff_40_V_read),
    .bias_buff_41_V_read(bias_buff_41_V_read),
    .bias_buff_42_V_read(bias_buff_42_V_read),
    .bias_buff_43_V_read(bias_buff_43_V_read),
    .bias_buff_44_V_read(bias_buff_44_V_read),
    .bias_buff_45_V_read(bias_buff_45_V_read),
    .bias_buff_46_V_read(bias_buff_46_V_read),
    .bias_buff_47_V_read(bias_buff_47_V_read),
    .bias_buff_48_V_read(bias_buff_48_V_read),
    .bias_buff_49_V_read(bias_buff_49_V_read),
    .bias_buff_50_V_read(bias_buff_50_V_read),
    .bias_buff_51_V_read(bias_buff_51_V_read),
    .bias_buff_52_V_read(bias_buff_52_V_read),
    .bias_buff_53_V_read(bias_buff_53_V_read),
    .bias_buff_54_V_read(bias_buff_54_V_read),
    .bias_buff_55_V_read(bias_buff_55_V_read),
    .bias_buff_56_V_read(bias_buff_56_V_read),
    .bias_buff_57_V_read(bias_buff_57_V_read),
    .bias_buff_58_V_read(bias_buff_58_V_read),
    .bias_buff_59_V_read(bias_buff_59_V_read),
    .bias_buff_60_V_read(bias_buff_60_V_read),
    .bias_buff_61_V_read(bias_buff_61_V_read),
    .bias_buff_62_V_read(bias_buff_62_V_read),
    .bias_buff_63_V_read(bias_buff_63_V_read),
    .bias_buff_V_offset(ch_0_reg_612),
    .fm_out_buff_V_address0(grp_compute4_fu_624_fm_out_buff_V_address0),
    .fm_out_buff_V_ce0(grp_compute4_fu_624_fm_out_buff_V_ce0),
    .fm_out_buff_V_we0(grp_compute4_fu_624_fm_out_buff_V_we0),
    .fm_out_buff_V_d0(grp_compute4_fu_624_fm_out_buff_V_d0),
    .fm_out_buff_V_q0(fm_out_buff_V_q0),
    .fm_out_buff_V_address1(grp_compute4_fu_624_fm_out_buff_V_address1),
    .fm_out_buff_V_ce1(grp_compute4_fu_624_fm_out_buff_V_ce1),
    .fm_out_buff_V_we1(grp_compute4_fu_624_fm_out_buff_V_we1),
    .fm_out_buff_V_d1(grp_compute4_fu_624_fm_out_buff_V_d1),
    .fm_out_buff_V_q1(fm_out_buff_V_q1)
);

store_output grp_store_output_fu_702(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_store_output_fu_702_ap_start),
    .ap_done(grp_store_output_fu_702_ap_done),
    .ap_idle(grp_store_output_fu_702_ap_idle),
    .ap_ready(grp_store_output_fu_702_ap_ready),
    .m_axi_out_V_AWVALID(grp_store_output_fu_702_m_axi_out_V_AWVALID),
    .m_axi_out_V_AWREADY(m_axi_out_V_AWREADY),
    .m_axi_out_V_AWADDR(grp_store_output_fu_702_m_axi_out_V_AWADDR),
    .m_axi_out_V_AWID(grp_store_output_fu_702_m_axi_out_V_AWID),
    .m_axi_out_V_AWLEN(grp_store_output_fu_702_m_axi_out_V_AWLEN),
    .m_axi_out_V_AWSIZE(grp_store_output_fu_702_m_axi_out_V_AWSIZE),
    .m_axi_out_V_AWBURST(grp_store_output_fu_702_m_axi_out_V_AWBURST),
    .m_axi_out_V_AWLOCK(grp_store_output_fu_702_m_axi_out_V_AWLOCK),
    .m_axi_out_V_AWCACHE(grp_store_output_fu_702_m_axi_out_V_AWCACHE),
    .m_axi_out_V_AWPROT(grp_store_output_fu_702_m_axi_out_V_AWPROT),
    .m_axi_out_V_AWQOS(grp_store_output_fu_702_m_axi_out_V_AWQOS),
    .m_axi_out_V_AWREGION(grp_store_output_fu_702_m_axi_out_V_AWREGION),
    .m_axi_out_V_AWUSER(grp_store_output_fu_702_m_axi_out_V_AWUSER),
    .m_axi_out_V_WVALID(grp_store_output_fu_702_m_axi_out_V_WVALID),
    .m_axi_out_V_WREADY(m_axi_out_V_WREADY),
    .m_axi_out_V_WDATA(grp_store_output_fu_702_m_axi_out_V_WDATA),
    .m_axi_out_V_WSTRB(grp_store_output_fu_702_m_axi_out_V_WSTRB),
    .m_axi_out_V_WLAST(grp_store_output_fu_702_m_axi_out_V_WLAST),
    .m_axi_out_V_WID(grp_store_output_fu_702_m_axi_out_V_WID),
    .m_axi_out_V_WUSER(grp_store_output_fu_702_m_axi_out_V_WUSER),
    .m_axi_out_V_ARVALID(grp_store_output_fu_702_m_axi_out_V_ARVALID),
    .m_axi_out_V_ARREADY(1'b0),
    .m_axi_out_V_ARADDR(grp_store_output_fu_702_m_axi_out_V_ARADDR),
    .m_axi_out_V_ARID(grp_store_output_fu_702_m_axi_out_V_ARID),
    .m_axi_out_V_ARLEN(grp_store_output_fu_702_m_axi_out_V_ARLEN),
    .m_axi_out_V_ARSIZE(grp_store_output_fu_702_m_axi_out_V_ARSIZE),
    .m_axi_out_V_ARBURST(grp_store_output_fu_702_m_axi_out_V_ARBURST),
    .m_axi_out_V_ARLOCK(grp_store_output_fu_702_m_axi_out_V_ARLOCK),
    .m_axi_out_V_ARCACHE(grp_store_output_fu_702_m_axi_out_V_ARCACHE),
    .m_axi_out_V_ARPROT(grp_store_output_fu_702_m_axi_out_V_ARPROT),
    .m_axi_out_V_ARQOS(grp_store_output_fu_702_m_axi_out_V_ARQOS),
    .m_axi_out_V_ARREGION(grp_store_output_fu_702_m_axi_out_V_ARREGION),
    .m_axi_out_V_ARUSER(grp_store_output_fu_702_m_axi_out_V_ARUSER),
    .m_axi_out_V_RVALID(1'b0),
    .m_axi_out_V_RREADY(grp_store_output_fu_702_m_axi_out_V_RREADY),
    .m_axi_out_V_RDATA(64'd0),
    .m_axi_out_V_RLAST(1'b0),
    .m_axi_out_V_RID(1'd0),
    .m_axi_out_V_RUSER(1'd0),
    .m_axi_out_V_RRESP(2'd0),
    .m_axi_out_V_BVALID(m_axi_out_V_BVALID),
    .m_axi_out_V_BREADY(grp_store_output_fu_702_m_axi_out_V_BREADY),
    .m_axi_out_V_BRESP(m_axi_out_V_BRESP),
    .m_axi_out_V_BID(m_axi_out_V_BID),
    .m_axi_out_V_BUSER(m_axi_out_V_BUSER),
    .out_V_offset(out_V_offset),
    .fm_out_buff_V_address0(grp_store_output_fu_702_fm_out_buff_V_address0),
    .fm_out_buff_V_ce0(grp_store_output_fu_702_fm_out_buff_V_ce0),
    .fm_out_buff_V_q0(fm_out_buff_V_q0),
    .m(ch_0_reg_612),
    .fm_row(trunc_ln124_reg_1076),
    .fm_col(trunc_ln124_1_reg_1081)
);

load_weight grp_load_weight_fu_714(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_weight_fu_714_ap_start),
    .ap_done(grp_load_weight_fu_714_ap_done),
    .ap_idle(grp_load_weight_fu_714_ap_idle),
    .ap_ready(grp_load_weight_fu_714_ap_ready),
    .m_axi_weight_V_AWVALID(grp_load_weight_fu_714_m_axi_weight_V_AWVALID),
    .m_axi_weight_V_AWREADY(1'b0),
    .m_axi_weight_V_AWADDR(grp_load_weight_fu_714_m_axi_weight_V_AWADDR),
    .m_axi_weight_V_AWID(grp_load_weight_fu_714_m_axi_weight_V_AWID),
    .m_axi_weight_V_AWLEN(grp_load_weight_fu_714_m_axi_weight_V_AWLEN),
    .m_axi_weight_V_AWSIZE(grp_load_weight_fu_714_m_axi_weight_V_AWSIZE),
    .m_axi_weight_V_AWBURST(grp_load_weight_fu_714_m_axi_weight_V_AWBURST),
    .m_axi_weight_V_AWLOCK(grp_load_weight_fu_714_m_axi_weight_V_AWLOCK),
    .m_axi_weight_V_AWCACHE(grp_load_weight_fu_714_m_axi_weight_V_AWCACHE),
    .m_axi_weight_V_AWPROT(grp_load_weight_fu_714_m_axi_weight_V_AWPROT),
    .m_axi_weight_V_AWQOS(grp_load_weight_fu_714_m_axi_weight_V_AWQOS),
    .m_axi_weight_V_AWREGION(grp_load_weight_fu_714_m_axi_weight_V_AWREGION),
    .m_axi_weight_V_AWUSER(grp_load_weight_fu_714_m_axi_weight_V_AWUSER),
    .m_axi_weight_V_WVALID(grp_load_weight_fu_714_m_axi_weight_V_WVALID),
    .m_axi_weight_V_WREADY(1'b0),
    .m_axi_weight_V_WDATA(grp_load_weight_fu_714_m_axi_weight_V_WDATA),
    .m_axi_weight_V_WSTRB(grp_load_weight_fu_714_m_axi_weight_V_WSTRB),
    .m_axi_weight_V_WLAST(grp_load_weight_fu_714_m_axi_weight_V_WLAST),
    .m_axi_weight_V_WID(grp_load_weight_fu_714_m_axi_weight_V_WID),
    .m_axi_weight_V_WUSER(grp_load_weight_fu_714_m_axi_weight_V_WUSER),
    .m_axi_weight_V_ARVALID(grp_load_weight_fu_714_m_axi_weight_V_ARVALID),
    .m_axi_weight_V_ARREADY(m_axi_weight_V_ARREADY),
    .m_axi_weight_V_ARADDR(grp_load_weight_fu_714_m_axi_weight_V_ARADDR),
    .m_axi_weight_V_ARID(grp_load_weight_fu_714_m_axi_weight_V_ARID),
    .m_axi_weight_V_ARLEN(grp_load_weight_fu_714_m_axi_weight_V_ARLEN),
    .m_axi_weight_V_ARSIZE(grp_load_weight_fu_714_m_axi_weight_V_ARSIZE),
    .m_axi_weight_V_ARBURST(grp_load_weight_fu_714_m_axi_weight_V_ARBURST),
    .m_axi_weight_V_ARLOCK(grp_load_weight_fu_714_m_axi_weight_V_ARLOCK),
    .m_axi_weight_V_ARCACHE(grp_load_weight_fu_714_m_axi_weight_V_ARCACHE),
    .m_axi_weight_V_ARPROT(grp_load_weight_fu_714_m_axi_weight_V_ARPROT),
    .m_axi_weight_V_ARQOS(grp_load_weight_fu_714_m_axi_weight_V_ARQOS),
    .m_axi_weight_V_ARREGION(grp_load_weight_fu_714_m_axi_weight_V_ARREGION),
    .m_axi_weight_V_ARUSER(grp_load_weight_fu_714_m_axi_weight_V_ARUSER),
    .m_axi_weight_V_RVALID(m_axi_weight_V_RVALID),
    .m_axi_weight_V_RREADY(grp_load_weight_fu_714_m_axi_weight_V_RREADY),
    .m_axi_weight_V_RDATA(m_axi_weight_V_RDATA),
    .m_axi_weight_V_RLAST(m_axi_weight_V_RLAST),
    .m_axi_weight_V_RID(m_axi_weight_V_RID),
    .m_axi_weight_V_RUSER(m_axi_weight_V_RUSER),
    .m_axi_weight_V_RRESP(m_axi_weight_V_RRESP),
    .m_axi_weight_V_BVALID(1'b0),
    .m_axi_weight_V_BREADY(grp_load_weight_fu_714_m_axi_weight_V_BREADY),
    .m_axi_weight_V_BRESP(2'd0),
    .m_axi_weight_V_BID(1'd0),
    .m_axi_weight_V_BUSER(1'd0),
    .weight_V_offset(weight_V_offset),
    .wt_buff_V_address0(grp_load_weight_fu_714_wt_buff_V_address0),
    .wt_buff_V_ce0(grp_load_weight_fu_714_wt_buff_V_ce0),
    .wt_buff_V_we0(grp_load_weight_fu_714_wt_buff_V_we0),
    .wt_buff_V_d0(grp_load_weight_fu_714_wt_buff_V_d0),
    .m(ch_0_reg_612)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute4_fu_624_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_compute4_fu_624_ap_start_reg <= 1'b1;
        end else if ((grp_compute4_fu_624_ap_ready == 1'b1)) begin
            grp_compute4_fu_624_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_weight_fu_714_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_fu_732_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_load_weight_fu_714_ap_start_reg <= 1'b1;
        end else if ((grp_load_weight_fu_714_ap_ready == 1'b1)) begin
            grp_load_weight_fu_714_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_store_output_fu_702_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_store_output_fu_702_ap_start_reg <= 1'b1;
        end else if ((grp_store_output_fu_702_ap_ready == 1'b1)) begin
            grp_store_output_fu_702_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ch_0_reg_612 <= 7'd0;
    end else if (((grp_store_output_fu_702_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ch_0_reg_612 <= ch_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ch_reg_1089 <= ch_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln124_1_reg_1081 <= trunc_ln124_1_fu_728_p1;
        trunc_ln124_reg_1076 <= trunc_ln124_fu_724_p1;
    end
end

always @ (*) begin
    if ((((tmp_fu_732_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_732_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fm_out_buff_V_address0 = grp_store_output_fu_702_fm_out_buff_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fm_out_buff_V_address0 = grp_compute4_fu_624_fm_out_buff_V_address0;
    end else begin
        fm_out_buff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fm_out_buff_V_ce0 = grp_store_output_fu_702_fm_out_buff_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fm_out_buff_V_ce0 = grp_compute4_fu_624_fm_out_buff_V_ce0;
    end else begin
        fm_out_buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fm_out_buff_V_ce1 = grp_compute4_fu_624_fm_out_buff_V_ce1;
    end else begin
        fm_out_buff_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fm_out_buff_V_we0 = grp_compute4_fu_624_fm_out_buff_V_we0;
    end else begin
        fm_out_buff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fm_out_buff_V_we1 = grp_compute4_fu_624_fm_out_buff_V_we1;
    end else begin
        fm_out_buff_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_out_V_AWVALID = grp_store_output_fu_702_m_axi_out_V_AWVALID;
    end else begin
        m_axi_out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_out_V_BREADY = grp_store_output_fu_702_m_axi_out_V_BREADY;
    end else begin
        m_axi_out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_out_V_WVALID = grp_store_output_fu_702_m_axi_out_V_WVALID;
    end else begin
        m_axi_out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_732_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_weight_V_ARVALID = grp_load_weight_fu_714_m_axi_weight_V_ARVALID;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_732_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_weight_V_RREADY = grp_load_weight_fu_714_m_axi_weight_V_RREADY;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wt_buff_V_address0 = grp_load_weight_fu_714_wt_buff_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wt_buff_V_address0 = grp_compute4_fu_624_wt_buff_V_address0;
    end else begin
        wt_buff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wt_buff_V_ce0 = grp_load_weight_fu_714_wt_buff_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wt_buff_V_ce0 = grp_compute4_fu_624_wt_buff_V_ce0;
    end else begin
        wt_buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wt_buff_V_ce1 = grp_compute4_fu_624_wt_buff_V_ce1;
    end else begin
        wt_buff_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wt_buff_V_we0 = grp_load_weight_fu_714_wt_buff_V_we0;
    end else begin
        wt_buff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_732_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_load_weight_fu_714_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_compute4_fu_624_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_store_output_fu_702_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ch_fu_740_p2 = (ch_0_reg_612 + 7'd16);

assign fm_in_buff_0_V_address0 = grp_compute4_fu_624_fm_in_buff_0_V_address0;

assign fm_in_buff_0_V_ce0 = grp_compute4_fu_624_fm_in_buff_0_V_ce0;

assign fm_in_buff_1_V_address0 = grp_compute4_fu_624_fm_in_buff_1_V_address0;

assign fm_in_buff_1_V_ce0 = grp_compute4_fu_624_fm_in_buff_1_V_ce0;

assign fm_in_buff_2_V_address0 = grp_compute4_fu_624_fm_in_buff_2_V_address0;

assign fm_in_buff_2_V_ce0 = grp_compute4_fu_624_fm_in_buff_2_V_ce0;

assign grp_compute4_fu_624_ap_start = grp_compute4_fu_624_ap_start_reg;

assign grp_load_weight_fu_714_ap_start = grp_load_weight_fu_714_ap_start_reg;

assign grp_store_output_fu_702_ap_start = grp_store_output_fu_702_ap_start_reg;

assign m_axi_out_V_ARADDR = 32'd0;

assign m_axi_out_V_ARBURST = 2'd0;

assign m_axi_out_V_ARCACHE = 4'd0;

assign m_axi_out_V_ARID = 1'd0;

assign m_axi_out_V_ARLEN = 32'd0;

assign m_axi_out_V_ARLOCK = 2'd0;

assign m_axi_out_V_ARPROT = 3'd0;

assign m_axi_out_V_ARQOS = 4'd0;

assign m_axi_out_V_ARREGION = 4'd0;

assign m_axi_out_V_ARSIZE = 3'd0;

assign m_axi_out_V_ARUSER = 1'd0;

assign m_axi_out_V_ARVALID = 1'b0;

assign m_axi_out_V_AWADDR = grp_store_output_fu_702_m_axi_out_V_AWADDR;

assign m_axi_out_V_AWBURST = grp_store_output_fu_702_m_axi_out_V_AWBURST;

assign m_axi_out_V_AWCACHE = grp_store_output_fu_702_m_axi_out_V_AWCACHE;

assign m_axi_out_V_AWID = grp_store_output_fu_702_m_axi_out_V_AWID;

assign m_axi_out_V_AWLEN = grp_store_output_fu_702_m_axi_out_V_AWLEN;

assign m_axi_out_V_AWLOCK = grp_store_output_fu_702_m_axi_out_V_AWLOCK;

assign m_axi_out_V_AWPROT = grp_store_output_fu_702_m_axi_out_V_AWPROT;

assign m_axi_out_V_AWQOS = grp_store_output_fu_702_m_axi_out_V_AWQOS;

assign m_axi_out_V_AWREGION = grp_store_output_fu_702_m_axi_out_V_AWREGION;

assign m_axi_out_V_AWSIZE = grp_store_output_fu_702_m_axi_out_V_AWSIZE;

assign m_axi_out_V_AWUSER = grp_store_output_fu_702_m_axi_out_V_AWUSER;

assign m_axi_out_V_RREADY = 1'b0;

assign m_axi_out_V_WDATA = grp_store_output_fu_702_m_axi_out_V_WDATA;

assign m_axi_out_V_WID = grp_store_output_fu_702_m_axi_out_V_WID;

assign m_axi_out_V_WLAST = grp_store_output_fu_702_m_axi_out_V_WLAST;

assign m_axi_out_V_WSTRB = grp_store_output_fu_702_m_axi_out_V_WSTRB;

assign m_axi_out_V_WUSER = grp_store_output_fu_702_m_axi_out_V_WUSER;

assign m_axi_weight_V_ARADDR = grp_load_weight_fu_714_m_axi_weight_V_ARADDR;

assign m_axi_weight_V_ARBURST = grp_load_weight_fu_714_m_axi_weight_V_ARBURST;

assign m_axi_weight_V_ARCACHE = grp_load_weight_fu_714_m_axi_weight_V_ARCACHE;

assign m_axi_weight_V_ARID = grp_load_weight_fu_714_m_axi_weight_V_ARID;

assign m_axi_weight_V_ARLEN = grp_load_weight_fu_714_m_axi_weight_V_ARLEN;

assign m_axi_weight_V_ARLOCK = grp_load_weight_fu_714_m_axi_weight_V_ARLOCK;

assign m_axi_weight_V_ARPROT = grp_load_weight_fu_714_m_axi_weight_V_ARPROT;

assign m_axi_weight_V_ARQOS = grp_load_weight_fu_714_m_axi_weight_V_ARQOS;

assign m_axi_weight_V_ARREGION = grp_load_weight_fu_714_m_axi_weight_V_ARREGION;

assign m_axi_weight_V_ARSIZE = grp_load_weight_fu_714_m_axi_weight_V_ARSIZE;

assign m_axi_weight_V_ARUSER = grp_load_weight_fu_714_m_axi_weight_V_ARUSER;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 16'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 2'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign tmp_fu_732_p3 = ch_0_reg_612[32'd6];

assign trunc_ln124_1_fu_728_p1 = col[15:0];

assign trunc_ln124_fu_724_p1 = row[15:0];

endmodule //compute_output
