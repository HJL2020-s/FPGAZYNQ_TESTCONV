-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weight_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    m_axi_out_V_AWVALID : OUT STD_LOGIC;
    m_axi_out_V_AWREADY : IN STD_LOGIC;
    m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_WVALID : OUT STD_LOGIC;
    m_axi_out_V_WREADY : IN STD_LOGIC;
    m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_V_WLAST : OUT STD_LOGIC;
    m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_ARVALID : OUT STD_LOGIC;
    m_axi_out_V_ARREADY : IN STD_LOGIC;
    m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RVALID : IN STD_LOGIC;
    m_axi_out_V_RREADY : OUT STD_LOGIC;
    m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_V_RLAST : IN STD_LOGIC;
    m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_BVALID : IN STD_LOGIC;
    m_axi_out_V_BREADY : OUT STD_LOGIC;
    m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
    fm_in_buff_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fm_in_buff_0_V_ce0 : OUT STD_LOGIC;
    fm_in_buff_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    fm_in_buff_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fm_in_buff_1_V_ce0 : OUT STD_LOGIC;
    fm_in_buff_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    fm_in_buff_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fm_in_buff_2_V_ce0 : OUT STD_LOGIC;
    fm_in_buff_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_23_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_24_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_25_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_26_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_27_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_28_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_29_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_30_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_31_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_32_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_33_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_34_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_35_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_36_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_37_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_38_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_39_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_40_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_41_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_42_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_43_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_44_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_45_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_46_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_47_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_48_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_49_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_50_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_51_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_52_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_53_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_54_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_55_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_56_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_57_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_58_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_59_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_60_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_61_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_62_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_63_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    row : IN STD_LOGIC_VECTOR (31 downto 0);
    col : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln124_fu_724_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln124_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln124_1_fu_728_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln124_1_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal ch_fu_740_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ch_reg_1089 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal wt_buff_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal wt_buff_V_ce0 : STD_LOGIC;
    signal wt_buff_V_we0 : STD_LOGIC;
    signal wt_buff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wt_buff_V_ce1 : STD_LOGIC;
    signal wt_buff_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_out_buff_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fm_out_buff_V_ce0 : STD_LOGIC;
    signal fm_out_buff_V_we0 : STD_LOGIC;
    signal fm_out_buff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal fm_out_buff_V_ce1 : STD_LOGIC;
    signal fm_out_buff_V_we1 : STD_LOGIC;
    signal fm_out_buff_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute4_fu_624_ap_start : STD_LOGIC;
    signal grp_compute4_fu_624_ap_done : STD_LOGIC;
    signal grp_compute4_fu_624_ap_idle : STD_LOGIC;
    signal grp_compute4_fu_624_ap_ready : STD_LOGIC;
    signal grp_compute4_fu_624_fm_in_buff_0_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute4_fu_624_fm_in_buff_0_V_ce0 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_in_buff_1_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute4_fu_624_fm_in_buff_1_V_ce0 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_in_buff_2_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute4_fu_624_fm_in_buff_2_V_ce0 : STD_LOGIC;
    signal grp_compute4_fu_624_wt_buff_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute4_fu_624_wt_buff_V_ce0 : STD_LOGIC;
    signal grp_compute4_fu_624_wt_buff_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_compute4_fu_624_wt_buff_V_ce1 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_out_buff_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_compute4_fu_624_fm_out_buff_V_ce0 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_out_buff_V_we0 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_out_buff_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute4_fu_624_fm_out_buff_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_compute4_fu_624_fm_out_buff_V_ce1 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_out_buff_V_we1 : STD_LOGIC;
    signal grp_compute4_fu_624_fm_out_buff_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_store_output_fu_702_ap_start : STD_LOGIC;
    signal grp_store_output_fu_702_ap_done : STD_LOGIC;
    signal grp_store_output_fu_702_ap_idle : STD_LOGIC;
    signal grp_store_output_fu_702_ap_ready : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_AWVALID : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_WVALID : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_WLAST : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARVALID : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_702_m_axi_out_V_RREADY : STD_LOGIC;
    signal grp_store_output_fu_702_m_axi_out_V_BREADY : STD_LOGIC;
    signal grp_store_output_fu_702_fm_out_buff_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_store_output_fu_702_fm_out_buff_V_ce0 : STD_LOGIC;
    signal grp_load_weight_fu_714_ap_start : STD_LOGIC;
    signal grp_load_weight_fu_714_ap_done : STD_LOGIC;
    signal grp_load_weight_fu_714_ap_idle : STD_LOGIC;
    signal grp_load_weight_fu_714_ap_ready : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_AWVALID : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_WVALID : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_WLAST : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARVALID : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_714_m_axi_weight_V_RREADY : STD_LOGIC;
    signal grp_load_weight_fu_714_m_axi_weight_V_BREADY : STD_LOGIC;
    signal grp_load_weight_fu_714_wt_buff_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_load_weight_fu_714_wt_buff_V_ce0 : STD_LOGIC;
    signal grp_load_weight_fu_714_wt_buff_V_we0 : STD_LOGIC;
    signal grp_load_weight_fu_714_wt_buff_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ch_0_reg_612 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_compute4_fu_624_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_store_output_fu_702_ap_start_reg : STD_LOGIC := '0';
    signal grp_load_weight_fu_714_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_732_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component compute4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fm_in_buff_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fm_in_buff_0_V_ce0 : OUT STD_LOGIC;
        fm_in_buff_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fm_in_buff_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fm_in_buff_1_V_ce0 : OUT STD_LOGIC;
        fm_in_buff_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fm_in_buff_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fm_in_buff_2_V_ce0 : OUT STD_LOGIC;
        fm_in_buff_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        wt_buff_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wt_buff_V_ce0 : OUT STD_LOGIC;
        wt_buff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        wt_buff_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wt_buff_V_ce1 : OUT STD_LOGIC;
        wt_buff_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_23_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_24_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_25_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_26_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_27_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_28_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_29_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_30_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_31_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_32_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_33_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_34_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_35_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_36_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_37_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_38_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_39_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_40_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_41_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_42_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_43_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_44_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_45_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_46_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_47_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_48_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_49_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_50_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_51_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_52_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_53_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_54_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_55_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_56_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_57_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_58_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_59_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_60_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_61_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_62_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_63_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_buff_V_offset : IN STD_LOGIC_VECTOR (6 downto 0);
        fm_out_buff_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        fm_out_buff_V_ce0 : OUT STD_LOGIC;
        fm_out_buff_V_we0 : OUT STD_LOGIC;
        fm_out_buff_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fm_out_buff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        fm_out_buff_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        fm_out_buff_V_ce1 : OUT STD_LOGIC;
        fm_out_buff_V_we1 : OUT STD_LOGIC;
        fm_out_buff_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        fm_out_buff_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component store_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_out_V_AWREADY : IN STD_LOGIC;
        m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WVALID : OUT STD_LOGIC;
        m_axi_out_V_WREADY : IN STD_LOGIC;
        m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_out_V_WLAST : OUT STD_LOGIC;
        m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_out_V_ARREADY : IN STD_LOGIC;
        m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RVALID : IN STD_LOGIC;
        m_axi_out_V_RREADY : OUT STD_LOGIC;
        m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_RLAST : IN STD_LOGIC;
        m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BVALID : IN STD_LOGIC;
        m_axi_out_V_BREADY : OUT STD_LOGIC;
        m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_offset : IN STD_LOGIC_VECTOR (28 downto 0);
        fm_out_buff_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        fm_out_buff_V_ce0 : OUT STD_LOGIC;
        fm_out_buff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        m : IN STD_LOGIC_VECTOR (6 downto 0);
        fm_row : IN STD_LOGIC_VECTOR (15 downto 0);
        fm_col : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component load_weight IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weight_V_AWVALID : OUT STD_LOGIC;
        m_axi_weight_V_AWREADY : IN STD_LOGIC;
        m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_WVALID : OUT STD_LOGIC;
        m_axi_weight_V_WREADY : IN STD_LOGIC;
        m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_WLAST : OUT STD_LOGIC;
        m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_ARVALID : OUT STD_LOGIC;
        m_axi_weight_V_ARREADY : IN STD_LOGIC;
        m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_RVALID : IN STD_LOGIC;
        m_axi_weight_V_RREADY : OUT STD_LOGIC;
        m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weight_V_RLAST : IN STD_LOGIC;
        m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_BVALID : IN STD_LOGIC;
        m_axi_weight_V_BREADY : OUT STD_LOGIC;
        m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight_V_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        wt_buff_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wt_buff_V_ce0 : OUT STD_LOGIC;
        wt_buff_V_we0 : OUT STD_LOGIC;
        wt_buff_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        m : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component compute_output_wtg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component compute_output_fmhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    wt_buff_V_U : component compute_output_wtg8j
    generic map (
        DataWidth => 16,
        AddressRange => 2352,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wt_buff_V_address0,
        ce0 => wt_buff_V_ce0,
        we0 => wt_buff_V_we0,
        d0 => grp_load_weight_fu_714_wt_buff_V_d0,
        q0 => wt_buff_V_q0,
        address1 => grp_compute4_fu_624_wt_buff_V_address1,
        ce1 => wt_buff_V_ce1,
        q1 => wt_buff_V_q1);

    fm_out_buff_V_U : component compute_output_fmhbi
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fm_out_buff_V_address0,
        ce0 => fm_out_buff_V_ce0,
        we0 => fm_out_buff_V_we0,
        d0 => grp_compute4_fu_624_fm_out_buff_V_d0,
        q0 => fm_out_buff_V_q0,
        address1 => grp_compute4_fu_624_fm_out_buff_V_address1,
        ce1 => fm_out_buff_V_ce1,
        we1 => fm_out_buff_V_we1,
        d1 => grp_compute4_fu_624_fm_out_buff_V_d1,
        q1 => fm_out_buff_V_q1);

    grp_compute4_fu_624 : component compute4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute4_fu_624_ap_start,
        ap_done => grp_compute4_fu_624_ap_done,
        ap_idle => grp_compute4_fu_624_ap_idle,
        ap_ready => grp_compute4_fu_624_ap_ready,
        fm_in_buff_0_V_address0 => grp_compute4_fu_624_fm_in_buff_0_V_address0,
        fm_in_buff_0_V_ce0 => grp_compute4_fu_624_fm_in_buff_0_V_ce0,
        fm_in_buff_0_V_q0 => fm_in_buff_0_V_q0,
        fm_in_buff_1_V_address0 => grp_compute4_fu_624_fm_in_buff_1_V_address0,
        fm_in_buff_1_V_ce0 => grp_compute4_fu_624_fm_in_buff_1_V_ce0,
        fm_in_buff_1_V_q0 => fm_in_buff_1_V_q0,
        fm_in_buff_2_V_address0 => grp_compute4_fu_624_fm_in_buff_2_V_address0,
        fm_in_buff_2_V_ce0 => grp_compute4_fu_624_fm_in_buff_2_V_ce0,
        fm_in_buff_2_V_q0 => fm_in_buff_2_V_q0,
        wt_buff_V_address0 => grp_compute4_fu_624_wt_buff_V_address0,
        wt_buff_V_ce0 => grp_compute4_fu_624_wt_buff_V_ce0,
        wt_buff_V_q0 => wt_buff_V_q0,
        wt_buff_V_address1 => grp_compute4_fu_624_wt_buff_V_address1,
        wt_buff_V_ce1 => grp_compute4_fu_624_wt_buff_V_ce1,
        wt_buff_V_q1 => wt_buff_V_q1,
        bias_buff_0_V_read => bias_buff_0_V_read,
        bias_buff_1_V_read => bias_buff_1_V_read,
        bias_buff_2_V_read => bias_buff_2_V_read,
        bias_buff_3_V_read => bias_buff_3_V_read,
        bias_buff_4_V_read => bias_buff_4_V_read,
        bias_buff_5_V_read => bias_buff_5_V_read,
        bias_buff_6_V_read => bias_buff_6_V_read,
        bias_buff_7_V_read => bias_buff_7_V_read,
        bias_buff_8_V_read => bias_buff_8_V_read,
        bias_buff_9_V_read => bias_buff_9_V_read,
        bias_buff_10_V_read => bias_buff_10_V_read,
        bias_buff_11_V_read => bias_buff_11_V_read,
        bias_buff_12_V_read => bias_buff_12_V_read,
        bias_buff_13_V_read => bias_buff_13_V_read,
        bias_buff_14_V_read => bias_buff_14_V_read,
        bias_buff_15_V_read => bias_buff_15_V_read,
        bias_buff_16_V_read => bias_buff_16_V_read,
        bias_buff_17_V_read => bias_buff_17_V_read,
        bias_buff_18_V_read => bias_buff_18_V_read,
        bias_buff_19_V_read => bias_buff_19_V_read,
        bias_buff_20_V_read => bias_buff_20_V_read,
        bias_buff_21_V_read => bias_buff_21_V_read,
        bias_buff_22_V_read => bias_buff_22_V_read,
        bias_buff_23_V_read => bias_buff_23_V_read,
        bias_buff_24_V_read => bias_buff_24_V_read,
        bias_buff_25_V_read => bias_buff_25_V_read,
        bias_buff_26_V_read => bias_buff_26_V_read,
        bias_buff_27_V_read => bias_buff_27_V_read,
        bias_buff_28_V_read => bias_buff_28_V_read,
        bias_buff_29_V_read => bias_buff_29_V_read,
        bias_buff_30_V_read => bias_buff_30_V_read,
        bias_buff_31_V_read => bias_buff_31_V_read,
        bias_buff_32_V_read => bias_buff_32_V_read,
        bias_buff_33_V_read => bias_buff_33_V_read,
        bias_buff_34_V_read => bias_buff_34_V_read,
        bias_buff_35_V_read => bias_buff_35_V_read,
        bias_buff_36_V_read => bias_buff_36_V_read,
        bias_buff_37_V_read => bias_buff_37_V_read,
        bias_buff_38_V_read => bias_buff_38_V_read,
        bias_buff_39_V_read => bias_buff_39_V_read,
        bias_buff_40_V_read => bias_buff_40_V_read,
        bias_buff_41_V_read => bias_buff_41_V_read,
        bias_buff_42_V_read => bias_buff_42_V_read,
        bias_buff_43_V_read => bias_buff_43_V_read,
        bias_buff_44_V_read => bias_buff_44_V_read,
        bias_buff_45_V_read => bias_buff_45_V_read,
        bias_buff_46_V_read => bias_buff_46_V_read,
        bias_buff_47_V_read => bias_buff_47_V_read,
        bias_buff_48_V_read => bias_buff_48_V_read,
        bias_buff_49_V_read => bias_buff_49_V_read,
        bias_buff_50_V_read => bias_buff_50_V_read,
        bias_buff_51_V_read => bias_buff_51_V_read,
        bias_buff_52_V_read => bias_buff_52_V_read,
        bias_buff_53_V_read => bias_buff_53_V_read,
        bias_buff_54_V_read => bias_buff_54_V_read,
        bias_buff_55_V_read => bias_buff_55_V_read,
        bias_buff_56_V_read => bias_buff_56_V_read,
        bias_buff_57_V_read => bias_buff_57_V_read,
        bias_buff_58_V_read => bias_buff_58_V_read,
        bias_buff_59_V_read => bias_buff_59_V_read,
        bias_buff_60_V_read => bias_buff_60_V_read,
        bias_buff_61_V_read => bias_buff_61_V_read,
        bias_buff_62_V_read => bias_buff_62_V_read,
        bias_buff_63_V_read => bias_buff_63_V_read,
        bias_buff_V_offset => ch_0_reg_612,
        fm_out_buff_V_address0 => grp_compute4_fu_624_fm_out_buff_V_address0,
        fm_out_buff_V_ce0 => grp_compute4_fu_624_fm_out_buff_V_ce0,
        fm_out_buff_V_we0 => grp_compute4_fu_624_fm_out_buff_V_we0,
        fm_out_buff_V_d0 => grp_compute4_fu_624_fm_out_buff_V_d0,
        fm_out_buff_V_q0 => fm_out_buff_V_q0,
        fm_out_buff_V_address1 => grp_compute4_fu_624_fm_out_buff_V_address1,
        fm_out_buff_V_ce1 => grp_compute4_fu_624_fm_out_buff_V_ce1,
        fm_out_buff_V_we1 => grp_compute4_fu_624_fm_out_buff_V_we1,
        fm_out_buff_V_d1 => grp_compute4_fu_624_fm_out_buff_V_d1,
        fm_out_buff_V_q1 => fm_out_buff_V_q1);

    grp_store_output_fu_702 : component store_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_output_fu_702_ap_start,
        ap_done => grp_store_output_fu_702_ap_done,
        ap_idle => grp_store_output_fu_702_ap_idle,
        ap_ready => grp_store_output_fu_702_ap_ready,
        m_axi_out_V_AWVALID => grp_store_output_fu_702_m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY => m_axi_out_V_AWREADY,
        m_axi_out_V_AWADDR => grp_store_output_fu_702_m_axi_out_V_AWADDR,
        m_axi_out_V_AWID => grp_store_output_fu_702_m_axi_out_V_AWID,
        m_axi_out_V_AWLEN => grp_store_output_fu_702_m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE => grp_store_output_fu_702_m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST => grp_store_output_fu_702_m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK => grp_store_output_fu_702_m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE => grp_store_output_fu_702_m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT => grp_store_output_fu_702_m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS => grp_store_output_fu_702_m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION => grp_store_output_fu_702_m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER => grp_store_output_fu_702_m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID => grp_store_output_fu_702_m_axi_out_V_WVALID,
        m_axi_out_V_WREADY => m_axi_out_V_WREADY,
        m_axi_out_V_WDATA => grp_store_output_fu_702_m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB => grp_store_output_fu_702_m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST => grp_store_output_fu_702_m_axi_out_V_WLAST,
        m_axi_out_V_WID => grp_store_output_fu_702_m_axi_out_V_WID,
        m_axi_out_V_WUSER => grp_store_output_fu_702_m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID => grp_store_output_fu_702_m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY => ap_const_logic_0,
        m_axi_out_V_ARADDR => grp_store_output_fu_702_m_axi_out_V_ARADDR,
        m_axi_out_V_ARID => grp_store_output_fu_702_m_axi_out_V_ARID,
        m_axi_out_V_ARLEN => grp_store_output_fu_702_m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE => grp_store_output_fu_702_m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST => grp_store_output_fu_702_m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK => grp_store_output_fu_702_m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE => grp_store_output_fu_702_m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT => grp_store_output_fu_702_m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS => grp_store_output_fu_702_m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION => grp_store_output_fu_702_m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER => grp_store_output_fu_702_m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID => ap_const_logic_0,
        m_axi_out_V_RREADY => grp_store_output_fu_702_m_axi_out_V_RREADY,
        m_axi_out_V_RDATA => ap_const_lv64_0,
        m_axi_out_V_RLAST => ap_const_logic_0,
        m_axi_out_V_RID => ap_const_lv1_0,
        m_axi_out_V_RUSER => ap_const_lv1_0,
        m_axi_out_V_RRESP => ap_const_lv2_0,
        m_axi_out_V_BVALID => m_axi_out_V_BVALID,
        m_axi_out_V_BREADY => grp_store_output_fu_702_m_axi_out_V_BREADY,
        m_axi_out_V_BRESP => m_axi_out_V_BRESP,
        m_axi_out_V_BID => m_axi_out_V_BID,
        m_axi_out_V_BUSER => m_axi_out_V_BUSER,
        out_V_offset => out_V_offset,
        fm_out_buff_V_address0 => grp_store_output_fu_702_fm_out_buff_V_address0,
        fm_out_buff_V_ce0 => grp_store_output_fu_702_fm_out_buff_V_ce0,
        fm_out_buff_V_q0 => fm_out_buff_V_q0,
        m => ch_0_reg_612,
        fm_row => trunc_ln124_reg_1076,
        fm_col => trunc_ln124_1_reg_1081);

    grp_load_weight_fu_714 : component load_weight
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_weight_fu_714_ap_start,
        ap_done => grp_load_weight_fu_714_ap_done,
        ap_idle => grp_load_weight_fu_714_ap_idle,
        ap_ready => grp_load_weight_fu_714_ap_ready,
        m_axi_weight_V_AWVALID => grp_load_weight_fu_714_m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY => ap_const_logic_0,
        m_axi_weight_V_AWADDR => grp_load_weight_fu_714_m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID => grp_load_weight_fu_714_m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN => grp_load_weight_fu_714_m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE => grp_load_weight_fu_714_m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST => grp_load_weight_fu_714_m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK => grp_load_weight_fu_714_m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE => grp_load_weight_fu_714_m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT => grp_load_weight_fu_714_m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS => grp_load_weight_fu_714_m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION => grp_load_weight_fu_714_m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER => grp_load_weight_fu_714_m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID => grp_load_weight_fu_714_m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY => ap_const_logic_0,
        m_axi_weight_V_WDATA => grp_load_weight_fu_714_m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB => grp_load_weight_fu_714_m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST => grp_load_weight_fu_714_m_axi_weight_V_WLAST,
        m_axi_weight_V_WID => grp_load_weight_fu_714_m_axi_weight_V_WID,
        m_axi_weight_V_WUSER => grp_load_weight_fu_714_m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID => grp_load_weight_fu_714_m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY => m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR => grp_load_weight_fu_714_m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID => grp_load_weight_fu_714_m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN => grp_load_weight_fu_714_m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE => grp_load_weight_fu_714_m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST => grp_load_weight_fu_714_m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK => grp_load_weight_fu_714_m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE => grp_load_weight_fu_714_m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT => grp_load_weight_fu_714_m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS => grp_load_weight_fu_714_m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION => grp_load_weight_fu_714_m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER => grp_load_weight_fu_714_m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID => m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY => grp_load_weight_fu_714_m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA => m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST => m_axi_weight_V_RLAST,
        m_axi_weight_V_RID => m_axi_weight_V_RID,
        m_axi_weight_V_RUSER => m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP => m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID => ap_const_logic_0,
        m_axi_weight_V_BREADY => grp_load_weight_fu_714_m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP => ap_const_lv2_0,
        m_axi_weight_V_BID => ap_const_lv1_0,
        m_axi_weight_V_BUSER => ap_const_lv1_0,
        weight_V_offset => weight_V_offset,
        wt_buff_V_address0 => grp_load_weight_fu_714_wt_buff_V_address0,
        wt_buff_V_ce0 => grp_load_weight_fu_714_wt_buff_V_ce0,
        wt_buff_V_we0 => grp_load_weight_fu_714_wt_buff_V_we0,
        wt_buff_V_d0 => grp_load_weight_fu_714_wt_buff_V_d0,
        m => ch_0_reg_612);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compute4_fu_624_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute4_fu_624_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_compute4_fu_624_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute4_fu_624_ap_ready = ap_const_logic_1)) then 
                    grp_compute4_fu_624_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_weight_fu_714_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_weight_fu_714_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_732_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_load_weight_fu_714_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_weight_fu_714_ap_ready = ap_const_logic_1)) then 
                    grp_load_weight_fu_714_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_output_fu_702_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_output_fu_702_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_store_output_fu_702_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_output_fu_702_ap_ready = ap_const_logic_1)) then 
                    grp_store_output_fu_702_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ch_0_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ch_0_reg_612 <= ap_const_lv7_0;
            elsif (((grp_store_output_fu_702_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                ch_0_reg_612 <= ch_reg_1089;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ch_reg_1089 <= ch_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln124_1_reg_1081 <= trunc_ln124_1_fu_728_p1;
                trunc_ln124_reg_1076 <= trunc_ln124_fu_724_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_compute4_fu_624_ap_done, grp_store_output_fu_702_ap_done, grp_load_weight_fu_714_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, tmp_fu_732_p3, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_732_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_load_weight_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_compute4_fu_624_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_store_output_fu_702_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_732_p3)
    begin
        if ((((tmp_fu_732_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_732_p3)
    begin
        if (((tmp_fu_732_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_740_p2 <= std_logic_vector(unsigned(ch_0_reg_612) + unsigned(ap_const_lv7_10));
    fm_in_buff_0_V_address0 <= grp_compute4_fu_624_fm_in_buff_0_V_address0;
    fm_in_buff_0_V_ce0 <= grp_compute4_fu_624_fm_in_buff_0_V_ce0;
    fm_in_buff_1_V_address0 <= grp_compute4_fu_624_fm_in_buff_1_V_address0;
    fm_in_buff_1_V_ce0 <= grp_compute4_fu_624_fm_in_buff_1_V_ce0;
    fm_in_buff_2_V_address0 <= grp_compute4_fu_624_fm_in_buff_2_V_address0;
    fm_in_buff_2_V_ce0 <= grp_compute4_fu_624_fm_in_buff_2_V_ce0;

    fm_out_buff_V_address0_assign_proc : process(grp_compute4_fu_624_fm_out_buff_V_address0, grp_store_output_fu_702_fm_out_buff_V_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fm_out_buff_V_address0 <= grp_store_output_fu_702_fm_out_buff_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_out_buff_V_address0 <= grp_compute4_fu_624_fm_out_buff_V_address0;
        else 
            fm_out_buff_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fm_out_buff_V_ce0_assign_proc : process(grp_compute4_fu_624_fm_out_buff_V_ce0, grp_store_output_fu_702_fm_out_buff_V_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            fm_out_buff_V_ce0 <= grp_store_output_fu_702_fm_out_buff_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_out_buff_V_ce0 <= grp_compute4_fu_624_fm_out_buff_V_ce0;
        else 
            fm_out_buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fm_out_buff_V_ce1_assign_proc : process(grp_compute4_fu_624_fm_out_buff_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_out_buff_V_ce1 <= grp_compute4_fu_624_fm_out_buff_V_ce1;
        else 
            fm_out_buff_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fm_out_buff_V_we0_assign_proc : process(grp_compute4_fu_624_fm_out_buff_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_out_buff_V_we0 <= grp_compute4_fu_624_fm_out_buff_V_we0;
        else 
            fm_out_buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fm_out_buff_V_we1_assign_proc : process(grp_compute4_fu_624_fm_out_buff_V_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fm_out_buff_V_we1 <= grp_compute4_fu_624_fm_out_buff_V_we1;
        else 
            fm_out_buff_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute4_fu_624_ap_start <= grp_compute4_fu_624_ap_start_reg;
    grp_load_weight_fu_714_ap_start <= grp_load_weight_fu_714_ap_start_reg;
    grp_store_output_fu_702_ap_start <= grp_store_output_fu_702_ap_start_reg;
    m_axi_out_V_ARADDR <= ap_const_lv32_0;
    m_axi_out_V_ARBURST <= ap_const_lv2_0;
    m_axi_out_V_ARCACHE <= ap_const_lv4_0;
    m_axi_out_V_ARID <= ap_const_lv1_0;
    m_axi_out_V_ARLEN <= ap_const_lv32_0;
    m_axi_out_V_ARLOCK <= ap_const_lv2_0;
    m_axi_out_V_ARPROT <= ap_const_lv3_0;
    m_axi_out_V_ARQOS <= ap_const_lv4_0;
    m_axi_out_V_ARREGION <= ap_const_lv4_0;
    m_axi_out_V_ARSIZE <= ap_const_lv3_0;
    m_axi_out_V_ARUSER <= ap_const_lv1_0;
    m_axi_out_V_ARVALID <= ap_const_logic_0;
    m_axi_out_V_AWADDR <= grp_store_output_fu_702_m_axi_out_V_AWADDR;
    m_axi_out_V_AWBURST <= grp_store_output_fu_702_m_axi_out_V_AWBURST;
    m_axi_out_V_AWCACHE <= grp_store_output_fu_702_m_axi_out_V_AWCACHE;
    m_axi_out_V_AWID <= grp_store_output_fu_702_m_axi_out_V_AWID;
    m_axi_out_V_AWLEN <= grp_store_output_fu_702_m_axi_out_V_AWLEN;
    m_axi_out_V_AWLOCK <= grp_store_output_fu_702_m_axi_out_V_AWLOCK;
    m_axi_out_V_AWPROT <= grp_store_output_fu_702_m_axi_out_V_AWPROT;
    m_axi_out_V_AWQOS <= grp_store_output_fu_702_m_axi_out_V_AWQOS;
    m_axi_out_V_AWREGION <= grp_store_output_fu_702_m_axi_out_V_AWREGION;
    m_axi_out_V_AWSIZE <= grp_store_output_fu_702_m_axi_out_V_AWSIZE;
    m_axi_out_V_AWUSER <= grp_store_output_fu_702_m_axi_out_V_AWUSER;

    m_axi_out_V_AWVALID_assign_proc : process(ap_CS_fsm_state6, grp_store_output_fu_702_m_axi_out_V_AWVALID, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_out_V_AWVALID <= grp_store_output_fu_702_m_axi_out_V_AWVALID;
        else 
            m_axi_out_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_out_V_BREADY_assign_proc : process(ap_CS_fsm_state6, grp_store_output_fu_702_m_axi_out_V_BREADY, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_out_V_BREADY <= grp_store_output_fu_702_m_axi_out_V_BREADY;
        else 
            m_axi_out_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_V_RREADY <= ap_const_logic_0;
    m_axi_out_V_WDATA <= grp_store_output_fu_702_m_axi_out_V_WDATA;
    m_axi_out_V_WID <= grp_store_output_fu_702_m_axi_out_V_WID;
    m_axi_out_V_WLAST <= grp_store_output_fu_702_m_axi_out_V_WLAST;
    m_axi_out_V_WSTRB <= grp_store_output_fu_702_m_axi_out_V_WSTRB;
    m_axi_out_V_WUSER <= grp_store_output_fu_702_m_axi_out_V_WUSER;

    m_axi_out_V_WVALID_assign_proc : process(ap_CS_fsm_state6, grp_store_output_fu_702_m_axi_out_V_WVALID, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_out_V_WVALID <= grp_store_output_fu_702_m_axi_out_V_WVALID;
        else 
            m_axi_out_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_ARADDR <= grp_load_weight_fu_714_m_axi_weight_V_ARADDR;
    m_axi_weight_V_ARBURST <= grp_load_weight_fu_714_m_axi_weight_V_ARBURST;
    m_axi_weight_V_ARCACHE <= grp_load_weight_fu_714_m_axi_weight_V_ARCACHE;
    m_axi_weight_V_ARID <= grp_load_weight_fu_714_m_axi_weight_V_ARID;
    m_axi_weight_V_ARLEN <= grp_load_weight_fu_714_m_axi_weight_V_ARLEN;
    m_axi_weight_V_ARLOCK <= grp_load_weight_fu_714_m_axi_weight_V_ARLOCK;
    m_axi_weight_V_ARPROT <= grp_load_weight_fu_714_m_axi_weight_V_ARPROT;
    m_axi_weight_V_ARQOS <= grp_load_weight_fu_714_m_axi_weight_V_ARQOS;
    m_axi_weight_V_ARREGION <= grp_load_weight_fu_714_m_axi_weight_V_ARREGION;
    m_axi_weight_V_ARSIZE <= grp_load_weight_fu_714_m_axi_weight_V_ARSIZE;
    m_axi_weight_V_ARUSER <= grp_load_weight_fu_714_m_axi_weight_V_ARUSER;

    m_axi_weight_V_ARVALID_assign_proc : process(grp_load_weight_fu_714_m_axi_weight_V_ARVALID, ap_CS_fsm_state2, tmp_fu_732_p3, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_732_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_weight_V_ARVALID <= grp_load_weight_fu_714_m_axi_weight_V_ARVALID;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(grp_load_weight_fu_714_m_axi_weight_V_RREADY, ap_CS_fsm_state2, tmp_fu_732_p3, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_732_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_weight_V_RREADY <= grp_load_weight_fu_714_m_axi_weight_V_RREADY;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv16_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv2_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    tmp_fu_732_p3 <= ch_0_reg_612(6 downto 6);
    trunc_ln124_1_fu_728_p1 <= col(16 - 1 downto 0);
    trunc_ln124_fu_724_p1 <= row(16 - 1 downto 0);

    wt_buff_V_address0_assign_proc : process(grp_compute4_fu_624_wt_buff_V_address0, grp_load_weight_fu_714_wt_buff_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wt_buff_V_address0 <= grp_load_weight_fu_714_wt_buff_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wt_buff_V_address0 <= grp_compute4_fu_624_wt_buff_V_address0;
        else 
            wt_buff_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wt_buff_V_ce0_assign_proc : process(grp_compute4_fu_624_wt_buff_V_ce0, grp_load_weight_fu_714_wt_buff_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wt_buff_V_ce0 <= grp_load_weight_fu_714_wt_buff_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wt_buff_V_ce0 <= grp_compute4_fu_624_wt_buff_V_ce0;
        else 
            wt_buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wt_buff_V_ce1_assign_proc : process(grp_compute4_fu_624_wt_buff_V_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wt_buff_V_ce1 <= grp_compute4_fu_624_wt_buff_V_ce1;
        else 
            wt_buff_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wt_buff_V_we0_assign_proc : process(grp_load_weight_fu_714_wt_buff_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wt_buff_V_we0 <= grp_load_weight_fu_714_wt_buff_V_we0;
        else 
            wt_buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
