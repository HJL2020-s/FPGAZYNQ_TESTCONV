// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in1_V_AWVALID,
        m_axi_in1_V_AWREADY,
        m_axi_in1_V_AWADDR,
        m_axi_in1_V_AWID,
        m_axi_in1_V_AWLEN,
        m_axi_in1_V_AWSIZE,
        m_axi_in1_V_AWBURST,
        m_axi_in1_V_AWLOCK,
        m_axi_in1_V_AWCACHE,
        m_axi_in1_V_AWPROT,
        m_axi_in1_V_AWQOS,
        m_axi_in1_V_AWREGION,
        m_axi_in1_V_AWUSER,
        m_axi_in1_V_WVALID,
        m_axi_in1_V_WREADY,
        m_axi_in1_V_WDATA,
        m_axi_in1_V_WSTRB,
        m_axi_in1_V_WLAST,
        m_axi_in1_V_WID,
        m_axi_in1_V_WUSER,
        m_axi_in1_V_ARVALID,
        m_axi_in1_V_ARREADY,
        m_axi_in1_V_ARADDR,
        m_axi_in1_V_ARID,
        m_axi_in1_V_ARLEN,
        m_axi_in1_V_ARSIZE,
        m_axi_in1_V_ARBURST,
        m_axi_in1_V_ARLOCK,
        m_axi_in1_V_ARCACHE,
        m_axi_in1_V_ARPROT,
        m_axi_in1_V_ARQOS,
        m_axi_in1_V_ARREGION,
        m_axi_in1_V_ARUSER,
        m_axi_in1_V_RVALID,
        m_axi_in1_V_RREADY,
        m_axi_in1_V_RDATA,
        m_axi_in1_V_RLAST,
        m_axi_in1_V_RID,
        m_axi_in1_V_RUSER,
        m_axi_in1_V_RRESP,
        m_axi_in1_V_BVALID,
        m_axi_in1_V_BREADY,
        m_axi_in1_V_BRESP,
        m_axi_in1_V_BID,
        m_axi_in1_V_BUSER,
        in1_V_offset,
        m_axi_in2_V_AWVALID,
        m_axi_in2_V_AWREADY,
        m_axi_in2_V_AWADDR,
        m_axi_in2_V_AWID,
        m_axi_in2_V_AWLEN,
        m_axi_in2_V_AWSIZE,
        m_axi_in2_V_AWBURST,
        m_axi_in2_V_AWLOCK,
        m_axi_in2_V_AWCACHE,
        m_axi_in2_V_AWPROT,
        m_axi_in2_V_AWQOS,
        m_axi_in2_V_AWREGION,
        m_axi_in2_V_AWUSER,
        m_axi_in2_V_WVALID,
        m_axi_in2_V_WREADY,
        m_axi_in2_V_WDATA,
        m_axi_in2_V_WSTRB,
        m_axi_in2_V_WLAST,
        m_axi_in2_V_WID,
        m_axi_in2_V_WUSER,
        m_axi_in2_V_ARVALID,
        m_axi_in2_V_ARREADY,
        m_axi_in2_V_ARADDR,
        m_axi_in2_V_ARID,
        m_axi_in2_V_ARLEN,
        m_axi_in2_V_ARSIZE,
        m_axi_in2_V_ARBURST,
        m_axi_in2_V_ARLOCK,
        m_axi_in2_V_ARCACHE,
        m_axi_in2_V_ARPROT,
        m_axi_in2_V_ARQOS,
        m_axi_in2_V_ARREGION,
        m_axi_in2_V_ARUSER,
        m_axi_in2_V_RVALID,
        m_axi_in2_V_RREADY,
        m_axi_in2_V_RDATA,
        m_axi_in2_V_RLAST,
        m_axi_in2_V_RID,
        m_axi_in2_V_RUSER,
        m_axi_in2_V_RRESP,
        m_axi_in2_V_BVALID,
        m_axi_in2_V_BREADY,
        m_axi_in2_V_BRESP,
        m_axi_in2_V_BID,
        m_axi_in2_V_BUSER,
        in2_V_offset,
        m_axi_in3_V_AWVALID,
        m_axi_in3_V_AWREADY,
        m_axi_in3_V_AWADDR,
        m_axi_in3_V_AWID,
        m_axi_in3_V_AWLEN,
        m_axi_in3_V_AWSIZE,
        m_axi_in3_V_AWBURST,
        m_axi_in3_V_AWLOCK,
        m_axi_in3_V_AWCACHE,
        m_axi_in3_V_AWPROT,
        m_axi_in3_V_AWQOS,
        m_axi_in3_V_AWREGION,
        m_axi_in3_V_AWUSER,
        m_axi_in3_V_WVALID,
        m_axi_in3_V_WREADY,
        m_axi_in3_V_WDATA,
        m_axi_in3_V_WSTRB,
        m_axi_in3_V_WLAST,
        m_axi_in3_V_WID,
        m_axi_in3_V_WUSER,
        m_axi_in3_V_ARVALID,
        m_axi_in3_V_ARREADY,
        m_axi_in3_V_ARADDR,
        m_axi_in3_V_ARID,
        m_axi_in3_V_ARLEN,
        m_axi_in3_V_ARSIZE,
        m_axi_in3_V_ARBURST,
        m_axi_in3_V_ARLOCK,
        m_axi_in3_V_ARCACHE,
        m_axi_in3_V_ARPROT,
        m_axi_in3_V_ARQOS,
        m_axi_in3_V_ARREGION,
        m_axi_in3_V_ARUSER,
        m_axi_in3_V_RVALID,
        m_axi_in3_V_RREADY,
        m_axi_in3_V_RDATA,
        m_axi_in3_V_RLAST,
        m_axi_in3_V_RID,
        m_axi_in3_V_RUSER,
        m_axi_in3_V_RRESP,
        m_axi_in3_V_BVALID,
        m_axi_in3_V_BREADY,
        m_axi_in3_V_BRESP,
        m_axi_in3_V_BID,
        m_axi_in3_V_BUSER,
        in3_V_offset,
        fm_in_buff_0_V_address0,
        fm_in_buff_0_V_ce0,
        fm_in_buff_0_V_we0,
        fm_in_buff_0_V_d0,
        fm_in_buff_1_V_address0,
        fm_in_buff_1_V_ce0,
        fm_in_buff_1_V_we0,
        fm_in_buff_1_V_d0,
        fm_in_buff_2_V_address0,
        fm_in_buff_2_V_ce0,
        fm_in_buff_2_V_we0,
        fm_in_buff_2_V_d0,
        fm_row,
        fm_col
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state27 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in1_V_AWVALID;
input   m_axi_in1_V_AWREADY;
output  [31:0] m_axi_in1_V_AWADDR;
output  [0:0] m_axi_in1_V_AWID;
output  [31:0] m_axi_in1_V_AWLEN;
output  [2:0] m_axi_in1_V_AWSIZE;
output  [1:0] m_axi_in1_V_AWBURST;
output  [1:0] m_axi_in1_V_AWLOCK;
output  [3:0] m_axi_in1_V_AWCACHE;
output  [2:0] m_axi_in1_V_AWPROT;
output  [3:0] m_axi_in1_V_AWQOS;
output  [3:0] m_axi_in1_V_AWREGION;
output  [0:0] m_axi_in1_V_AWUSER;
output   m_axi_in1_V_WVALID;
input   m_axi_in1_V_WREADY;
output  [15:0] m_axi_in1_V_WDATA;
output  [1:0] m_axi_in1_V_WSTRB;
output   m_axi_in1_V_WLAST;
output  [0:0] m_axi_in1_V_WID;
output  [0:0] m_axi_in1_V_WUSER;
output   m_axi_in1_V_ARVALID;
input   m_axi_in1_V_ARREADY;
output  [31:0] m_axi_in1_V_ARADDR;
output  [0:0] m_axi_in1_V_ARID;
output  [31:0] m_axi_in1_V_ARLEN;
output  [2:0] m_axi_in1_V_ARSIZE;
output  [1:0] m_axi_in1_V_ARBURST;
output  [1:0] m_axi_in1_V_ARLOCK;
output  [3:0] m_axi_in1_V_ARCACHE;
output  [2:0] m_axi_in1_V_ARPROT;
output  [3:0] m_axi_in1_V_ARQOS;
output  [3:0] m_axi_in1_V_ARREGION;
output  [0:0] m_axi_in1_V_ARUSER;
input   m_axi_in1_V_RVALID;
output   m_axi_in1_V_RREADY;
input  [15:0] m_axi_in1_V_RDATA;
input   m_axi_in1_V_RLAST;
input  [0:0] m_axi_in1_V_RID;
input  [0:0] m_axi_in1_V_RUSER;
input  [1:0] m_axi_in1_V_RRESP;
input   m_axi_in1_V_BVALID;
output   m_axi_in1_V_BREADY;
input  [1:0] m_axi_in1_V_BRESP;
input  [0:0] m_axi_in1_V_BID;
input  [0:0] m_axi_in1_V_BUSER;
input  [30:0] in1_V_offset;
output   m_axi_in2_V_AWVALID;
input   m_axi_in2_V_AWREADY;
output  [31:0] m_axi_in2_V_AWADDR;
output  [0:0] m_axi_in2_V_AWID;
output  [31:0] m_axi_in2_V_AWLEN;
output  [2:0] m_axi_in2_V_AWSIZE;
output  [1:0] m_axi_in2_V_AWBURST;
output  [1:0] m_axi_in2_V_AWLOCK;
output  [3:0] m_axi_in2_V_AWCACHE;
output  [2:0] m_axi_in2_V_AWPROT;
output  [3:0] m_axi_in2_V_AWQOS;
output  [3:0] m_axi_in2_V_AWREGION;
output  [0:0] m_axi_in2_V_AWUSER;
output   m_axi_in2_V_WVALID;
input   m_axi_in2_V_WREADY;
output  [15:0] m_axi_in2_V_WDATA;
output  [1:0] m_axi_in2_V_WSTRB;
output   m_axi_in2_V_WLAST;
output  [0:0] m_axi_in2_V_WID;
output  [0:0] m_axi_in2_V_WUSER;
output   m_axi_in2_V_ARVALID;
input   m_axi_in2_V_ARREADY;
output  [31:0] m_axi_in2_V_ARADDR;
output  [0:0] m_axi_in2_V_ARID;
output  [31:0] m_axi_in2_V_ARLEN;
output  [2:0] m_axi_in2_V_ARSIZE;
output  [1:0] m_axi_in2_V_ARBURST;
output  [1:0] m_axi_in2_V_ARLOCK;
output  [3:0] m_axi_in2_V_ARCACHE;
output  [2:0] m_axi_in2_V_ARPROT;
output  [3:0] m_axi_in2_V_ARQOS;
output  [3:0] m_axi_in2_V_ARREGION;
output  [0:0] m_axi_in2_V_ARUSER;
input   m_axi_in2_V_RVALID;
output   m_axi_in2_V_RREADY;
input  [15:0] m_axi_in2_V_RDATA;
input   m_axi_in2_V_RLAST;
input  [0:0] m_axi_in2_V_RID;
input  [0:0] m_axi_in2_V_RUSER;
input  [1:0] m_axi_in2_V_RRESP;
input   m_axi_in2_V_BVALID;
output   m_axi_in2_V_BREADY;
input  [1:0] m_axi_in2_V_BRESP;
input  [0:0] m_axi_in2_V_BID;
input  [0:0] m_axi_in2_V_BUSER;
input  [30:0] in2_V_offset;
output   m_axi_in3_V_AWVALID;
input   m_axi_in3_V_AWREADY;
output  [31:0] m_axi_in3_V_AWADDR;
output  [0:0] m_axi_in3_V_AWID;
output  [31:0] m_axi_in3_V_AWLEN;
output  [2:0] m_axi_in3_V_AWSIZE;
output  [1:0] m_axi_in3_V_AWBURST;
output  [1:0] m_axi_in3_V_AWLOCK;
output  [3:0] m_axi_in3_V_AWCACHE;
output  [2:0] m_axi_in3_V_AWPROT;
output  [3:0] m_axi_in3_V_AWQOS;
output  [3:0] m_axi_in3_V_AWREGION;
output  [0:0] m_axi_in3_V_AWUSER;
output   m_axi_in3_V_WVALID;
input   m_axi_in3_V_WREADY;
output  [15:0] m_axi_in3_V_WDATA;
output  [1:0] m_axi_in3_V_WSTRB;
output   m_axi_in3_V_WLAST;
output  [0:0] m_axi_in3_V_WID;
output  [0:0] m_axi_in3_V_WUSER;
output   m_axi_in3_V_ARVALID;
input   m_axi_in3_V_ARREADY;
output  [31:0] m_axi_in3_V_ARADDR;
output  [0:0] m_axi_in3_V_ARID;
output  [31:0] m_axi_in3_V_ARLEN;
output  [2:0] m_axi_in3_V_ARSIZE;
output  [1:0] m_axi_in3_V_ARBURST;
output  [1:0] m_axi_in3_V_ARLOCK;
output  [3:0] m_axi_in3_V_ARCACHE;
output  [2:0] m_axi_in3_V_ARPROT;
output  [3:0] m_axi_in3_V_ARQOS;
output  [3:0] m_axi_in3_V_ARREGION;
output  [0:0] m_axi_in3_V_ARUSER;
input   m_axi_in3_V_RVALID;
output   m_axi_in3_V_RREADY;
input  [15:0] m_axi_in3_V_RDATA;
input   m_axi_in3_V_RLAST;
input  [0:0] m_axi_in3_V_RID;
input  [0:0] m_axi_in3_V_RUSER;
input  [1:0] m_axi_in3_V_RRESP;
input   m_axi_in3_V_BVALID;
output   m_axi_in3_V_BREADY;
input  [1:0] m_axi_in3_V_BRESP;
input  [0:0] m_axi_in3_V_BID;
input  [0:0] m_axi_in3_V_BUSER;
input  [30:0] in3_V_offset;
output  [11:0] fm_in_buff_0_V_address0;
output   fm_in_buff_0_V_ce0;
output   fm_in_buff_0_V_we0;
output  [15:0] fm_in_buff_0_V_d0;
output  [11:0] fm_in_buff_1_V_address0;
output   fm_in_buff_1_V_ce0;
output   fm_in_buff_1_V_we0;
output  [15:0] fm_in_buff_1_V_d0;
output  [11:0] fm_in_buff_2_V_address0;
output   fm_in_buff_2_V_ce0;
output   fm_in_buff_2_V_we0;
output  [15:0] fm_in_buff_2_V_d0;
input  [15:0] fm_row;
input  [15:0] fm_col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_in1_V_ARVALID;
reg m_axi_in1_V_RREADY;
reg m_axi_in2_V_ARVALID;
reg m_axi_in2_V_RREADY;
reg m_axi_in3_V_ARVALID;
reg m_axi_in3_V_RREADY;
reg[11:0] fm_in_buff_0_V_address0;
reg fm_in_buff_0_V_ce0;
reg fm_in_buff_0_V_we0;
reg[15:0] fm_in_buff_0_V_d0;
reg[11:0] fm_in_buff_1_V_address0;
reg fm_in_buff_1_V_ce0;
reg fm_in_buff_1_V_we0;
reg[15:0] fm_in_buff_1_V_d0;
reg[11:0] fm_in_buff_2_V_address0;
reg fm_in_buff_2_V_ce0;
reg fm_in_buff_2_V_we0;
reg[15:0] fm_in_buff_2_V_d0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter16;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_15_reg_765;
reg    in1_V_blk_n_R;
reg    ap_enable_reg_pp0_iter23;
reg    in2_V_blk_n_AR;
reg    in2_V_blk_n_R;
reg    in3_V_blk_n_AR;
reg    in3_V_blk_n_R;
reg   [11:0] indvar_flatten_reg_246;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state18_io;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
reg    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] i_0_reg_258;
reg   [5:0] j_0_reg_269;
wire   [17:0] zext_ln30_fu_288_p1;
reg   [17:0] zext_ln30_reg_677;
wire   [17:0] zext_ln30_1_fu_300_p1;
reg   [17:0] zext_ln30_1_reg_683;
wire  signed [26:0] sext_ln30_fu_310_p1;
reg  signed [26:0] sext_ln30_reg_688;
wire   [26:0] zext_ln31_fu_320_p1;
reg   [26:0] zext_ln31_reg_693;
wire   [26:0] zext_ln32_fu_330_p1;
reg   [26:0] zext_ln32_reg_698;
wire   [32:0] zext_ln31_1_fu_334_p1;
reg   [32:0] zext_ln31_1_reg_703;
wire   [32:0] zext_ln32_1_fu_338_p1;
reg   [32:0] zext_ln32_1_reg_708;
wire   [32:0] zext_ln27_2_fu_342_p1;
reg   [32:0] zext_ln27_2_reg_713;
wire   [0:0] icmp_ln27_fu_403_p2;
reg   [0:0] icmp_ln27_reg_718;
reg   [0:0] icmp_ln27_reg_718_pp0_iter1_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter2_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter3_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter4_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter5_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter6_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter7_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter8_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter9_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter10_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter11_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter12_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter13_reg;
reg   [0:0] icmp_ln27_reg_718_pp0_iter14_reg;
wire   [11:0] add_ln27_4_fu_409_p2;
reg   [11:0] add_ln27_4_reg_722;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln27_fu_427_p3;
reg   [5:0] select_ln27_reg_727;
reg   [5:0] select_ln27_reg_727_pp0_iter1_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter2_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter3_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter4_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter5_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter6_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter7_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter8_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter9_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter10_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter11_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter12_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter13_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter14_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter15_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter16_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter17_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter18_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter19_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter20_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter21_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter22_reg;
reg   [5:0] select_ln27_reg_727_pp0_iter23_reg;
wire   [26:0] add_ln27_fu_482_p2;
reg   [26:0] add_ln27_reg_733;
reg   [26:0] add_ln27_reg_733_pp0_iter1_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter2_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter3_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter4_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter5_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter6_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter7_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter8_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter9_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter10_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter11_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter12_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter13_reg;
reg   [26:0] add_ln27_reg_733_pp0_iter14_reg;
wire   [5:0] select_ln27_2_fu_488_p3;
reg   [5:0] select_ln27_2_reg_740;
reg   [5:0] select_ln27_2_reg_740_pp0_iter1_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter2_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter3_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter4_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter5_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter6_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter7_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter8_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter9_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter10_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter11_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter12_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter13_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter14_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter15_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter16_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter17_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter18_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter19_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter20_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter21_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter22_reg;
reg   [5:0] select_ln27_2_reg_740_pp0_iter23_reg;
wire   [0:0] select_ln27_3_fu_514_p3;
reg   [0:0] select_ln27_3_reg_746;
reg   [0:0] select_ln27_3_reg_746_pp0_iter1_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter2_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter3_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter4_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter5_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter6_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter7_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter8_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter9_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter10_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter11_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter12_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter13_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter14_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter15_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter16_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter17_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter18_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter19_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter20_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter21_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter22_reg;
reg   [0:0] select_ln27_3_reg_746_pp0_iter23_reg;
wire   [0:0] and_ln33_fu_549_p2;
reg   [0:0] and_ln33_reg_750;
reg   [0:0] and_ln33_reg_750_pp0_iter1_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter2_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter3_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter4_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter5_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter6_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter7_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter8_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter9_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter10_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter11_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter12_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter13_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter14_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter15_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter16_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter17_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter18_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter19_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter20_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter21_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter22_reg;
reg   [0:0] and_ln33_reg_750_pp0_iter23_reg;
wire   [5:0] j_fu_555_p2;
reg   [31:0] in1_V_addr_reg_759;
wire   [0:0] empty_15_fu_600_p2;
reg   [31:0] in2_V_addr_reg_769;
reg   [31:0] in3_V_addr_reg_775;
reg   [15:0] tmp1_V_reg_781;
reg   [15:0] tmp2_V_reg_786;
reg   [15:0] tmp3_V_reg_791;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter24;
reg   [11:0] ap_phi_mux_indvar_flatten_phi_fu_250_p4;
reg   [5:0] ap_phi_mux_i_0_phi_fu_262_p4;
wire   [63:0] zext_ln203_2_fu_654_p1;
wire   [63:0] zext_ln203_4_fu_670_p1;
wire  signed [63:0] sext_ln30_1_fu_590_p1;
wire  signed [63:0] sext_ln31_fu_611_p1;
wire  signed [63:0] sext_ln32_fu_626_p1;
wire   [16:0] shl_ln_fu_280_p3;
wire   [16:0] shl_ln30_1_fu_292_p3;
wire   [17:0] add_ln30_1_fu_304_p2;
wire   [17:0] add_ln31_fu_314_p2;
wire   [17:0] add_ln32_fu_324_p2;
wire   [17:0] zext_ln27_fu_346_p1;
wire   [17:0] add_ln30_fu_350_p2;
wire   [25:0] shl_ln30_2_fu_355_p3;
wire   [22:0] shl_ln30_3_fu_367_p3;
wire   [26:0] zext_ln30_2_fu_363_p1;
wire   [26:0] zext_ln30_3_fu_375_p1;
wire   [0:0] icmp_ln33_fu_385_p2;
wire   [0:0] icmp_ln33_1_fu_391_p2;
wire   [0:0] icmp_ln28_fu_421_p2;
wire   [5:0] i_fu_415_p2;
wire   [17:0] zext_ln27_1_fu_435_p1;
wire   [17:0] add_ln30_2_fu_439_p2;
wire   [25:0] shl_ln30_2_mid1_fu_444_p3;
wire   [22:0] shl_ln30_3_mid1_fu_456_p3;
wire   [26:0] zext_ln30_4_fu_452_p1;
wire   [26:0] zext_ln30_5_fu_464_p1;
wire   [26:0] sub_ln30_1_fu_468_p2;
wire   [26:0] sub_ln30_fu_379_p2;
wire   [26:0] select_ln27_1_fu_474_p3;
wire   [0:0] icmp_ln33_4_fu_496_p2;
wire   [0:0] icmp_ln33_5_fu_502_p2;
wire   [0:0] or_ln33_1_fu_508_p2;
wire   [0:0] or_ln33_fu_397_p2;
wire   [6:0] grp_fu_526_p1;
wire   [17:0] zext_ln28_fu_522_p1;
wire   [17:0] add_ln33_fu_532_p2;
wire   [0:0] icmp_ln33_2_fu_537_p2;
wire   [0:0] icmp_ln33_3_fu_543_p2;
wire   [26:0] add_ln27_1_fu_561_p2;
wire   [26:0] add_ln27_2_fu_569_p2;
wire   [26:0] add_ln27_3_fu_577_p2;
wire  signed [32:0] sext_ln27_fu_565_p1;
wire   [32:0] add_ln30_3_fu_585_p2;
wire   [11:0] grp_fu_526_p2;
wire  signed [32:0] sext_ln27_1_fu_573_p1;
wire   [32:0] add_ln31_1_fu_606_p2;
wire  signed [32:0] sext_ln28_fu_581_p1;
wire   [32:0] add_ln32_1_fu_621_p2;
wire   [5:0] mul_ln203_fu_639_p0;
wire   [11:0] mul_ln203_fu_639_p2;
wire   [11:0] zext_ln203_1_fu_645_p1;
wire   [11:0] add_ln203_fu_648_p2;
wire   [11:0] zext_ln203_3_fu_661_p1;
wire   [11:0] add_ln203_1_fu_664_p2;
reg    grp_fu_526_ce;
wire    ap_CS_fsm_state27;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] mul_ln203_fu_639_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
end

conv_urem_12ns_7nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
conv_urem_12ns_7nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_250_p4),
    .din1(grp_fu_526_p1),
    .ce(grp_fu_526_ce),
    .dout(grp_fu_526_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter24 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_258 <= select_ln27_2_reg_740;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_258 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_246 <= add_ln27_4_reg_722;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_246 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_403_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_269 <= j_fu_555_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_269 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln27_4_reg_722 <= add_ln27_4_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_403_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln27_reg_733[26 : 5] <= add_ln27_fu_482_p2[26 : 5];
        select_ln27_3_reg_746 <= select_ln27_3_fu_514_p3;
        select_ln27_reg_727 <= select_ln27_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln27_reg_733_pp0_iter10_reg[26 : 5] <= add_ln27_reg_733_pp0_iter9_reg[26 : 5];
        add_ln27_reg_733_pp0_iter11_reg[26 : 5] <= add_ln27_reg_733_pp0_iter10_reg[26 : 5];
        add_ln27_reg_733_pp0_iter12_reg[26 : 5] <= add_ln27_reg_733_pp0_iter11_reg[26 : 5];
        add_ln27_reg_733_pp0_iter13_reg[26 : 5] <= add_ln27_reg_733_pp0_iter12_reg[26 : 5];
        add_ln27_reg_733_pp0_iter14_reg[26 : 5] <= add_ln27_reg_733_pp0_iter13_reg[26 : 5];
        add_ln27_reg_733_pp0_iter2_reg[26 : 5] <= add_ln27_reg_733_pp0_iter1_reg[26 : 5];
        add_ln27_reg_733_pp0_iter3_reg[26 : 5] <= add_ln27_reg_733_pp0_iter2_reg[26 : 5];
        add_ln27_reg_733_pp0_iter4_reg[26 : 5] <= add_ln27_reg_733_pp0_iter3_reg[26 : 5];
        add_ln27_reg_733_pp0_iter5_reg[26 : 5] <= add_ln27_reg_733_pp0_iter4_reg[26 : 5];
        add_ln27_reg_733_pp0_iter6_reg[26 : 5] <= add_ln27_reg_733_pp0_iter5_reg[26 : 5];
        add_ln27_reg_733_pp0_iter7_reg[26 : 5] <= add_ln27_reg_733_pp0_iter6_reg[26 : 5];
        add_ln27_reg_733_pp0_iter8_reg[26 : 5] <= add_ln27_reg_733_pp0_iter7_reg[26 : 5];
        add_ln27_reg_733_pp0_iter9_reg[26 : 5] <= add_ln27_reg_733_pp0_iter8_reg[26 : 5];
        and_ln33_reg_750_pp0_iter10_reg <= and_ln33_reg_750_pp0_iter9_reg;
        and_ln33_reg_750_pp0_iter11_reg <= and_ln33_reg_750_pp0_iter10_reg;
        and_ln33_reg_750_pp0_iter12_reg <= and_ln33_reg_750_pp0_iter11_reg;
        and_ln33_reg_750_pp0_iter13_reg <= and_ln33_reg_750_pp0_iter12_reg;
        and_ln33_reg_750_pp0_iter14_reg <= and_ln33_reg_750_pp0_iter13_reg;
        and_ln33_reg_750_pp0_iter15_reg <= and_ln33_reg_750_pp0_iter14_reg;
        and_ln33_reg_750_pp0_iter16_reg <= and_ln33_reg_750_pp0_iter15_reg;
        and_ln33_reg_750_pp0_iter17_reg <= and_ln33_reg_750_pp0_iter16_reg;
        and_ln33_reg_750_pp0_iter18_reg <= and_ln33_reg_750_pp0_iter17_reg;
        and_ln33_reg_750_pp0_iter19_reg <= and_ln33_reg_750_pp0_iter18_reg;
        and_ln33_reg_750_pp0_iter20_reg <= and_ln33_reg_750_pp0_iter19_reg;
        and_ln33_reg_750_pp0_iter21_reg <= and_ln33_reg_750_pp0_iter20_reg;
        and_ln33_reg_750_pp0_iter22_reg <= and_ln33_reg_750_pp0_iter21_reg;
        and_ln33_reg_750_pp0_iter23_reg <= and_ln33_reg_750_pp0_iter22_reg;
        and_ln33_reg_750_pp0_iter2_reg <= and_ln33_reg_750_pp0_iter1_reg;
        and_ln33_reg_750_pp0_iter3_reg <= and_ln33_reg_750_pp0_iter2_reg;
        and_ln33_reg_750_pp0_iter4_reg <= and_ln33_reg_750_pp0_iter3_reg;
        and_ln33_reg_750_pp0_iter5_reg <= and_ln33_reg_750_pp0_iter4_reg;
        and_ln33_reg_750_pp0_iter6_reg <= and_ln33_reg_750_pp0_iter5_reg;
        and_ln33_reg_750_pp0_iter7_reg <= and_ln33_reg_750_pp0_iter6_reg;
        and_ln33_reg_750_pp0_iter8_reg <= and_ln33_reg_750_pp0_iter7_reg;
        and_ln33_reg_750_pp0_iter9_reg <= and_ln33_reg_750_pp0_iter8_reg;
        icmp_ln27_reg_718_pp0_iter10_reg <= icmp_ln27_reg_718_pp0_iter9_reg;
        icmp_ln27_reg_718_pp0_iter11_reg <= icmp_ln27_reg_718_pp0_iter10_reg;
        icmp_ln27_reg_718_pp0_iter12_reg <= icmp_ln27_reg_718_pp0_iter11_reg;
        icmp_ln27_reg_718_pp0_iter13_reg <= icmp_ln27_reg_718_pp0_iter12_reg;
        icmp_ln27_reg_718_pp0_iter14_reg <= icmp_ln27_reg_718_pp0_iter13_reg;
        icmp_ln27_reg_718_pp0_iter2_reg <= icmp_ln27_reg_718_pp0_iter1_reg;
        icmp_ln27_reg_718_pp0_iter3_reg <= icmp_ln27_reg_718_pp0_iter2_reg;
        icmp_ln27_reg_718_pp0_iter4_reg <= icmp_ln27_reg_718_pp0_iter3_reg;
        icmp_ln27_reg_718_pp0_iter5_reg <= icmp_ln27_reg_718_pp0_iter4_reg;
        icmp_ln27_reg_718_pp0_iter6_reg <= icmp_ln27_reg_718_pp0_iter5_reg;
        icmp_ln27_reg_718_pp0_iter7_reg <= icmp_ln27_reg_718_pp0_iter6_reg;
        icmp_ln27_reg_718_pp0_iter8_reg <= icmp_ln27_reg_718_pp0_iter7_reg;
        icmp_ln27_reg_718_pp0_iter9_reg <= icmp_ln27_reg_718_pp0_iter8_reg;
        in2_V_addr_reg_769 <= sext_ln31_fu_611_p1;
        in3_V_addr_reg_775 <= sext_ln32_fu_626_p1;
        select_ln27_2_reg_740_pp0_iter10_reg <= select_ln27_2_reg_740_pp0_iter9_reg;
        select_ln27_2_reg_740_pp0_iter11_reg <= select_ln27_2_reg_740_pp0_iter10_reg;
        select_ln27_2_reg_740_pp0_iter12_reg <= select_ln27_2_reg_740_pp0_iter11_reg;
        select_ln27_2_reg_740_pp0_iter13_reg <= select_ln27_2_reg_740_pp0_iter12_reg;
        select_ln27_2_reg_740_pp0_iter14_reg <= select_ln27_2_reg_740_pp0_iter13_reg;
        select_ln27_2_reg_740_pp0_iter15_reg <= select_ln27_2_reg_740_pp0_iter14_reg;
        select_ln27_2_reg_740_pp0_iter16_reg <= select_ln27_2_reg_740_pp0_iter15_reg;
        select_ln27_2_reg_740_pp0_iter17_reg <= select_ln27_2_reg_740_pp0_iter16_reg;
        select_ln27_2_reg_740_pp0_iter18_reg <= select_ln27_2_reg_740_pp0_iter17_reg;
        select_ln27_2_reg_740_pp0_iter19_reg <= select_ln27_2_reg_740_pp0_iter18_reg;
        select_ln27_2_reg_740_pp0_iter20_reg <= select_ln27_2_reg_740_pp0_iter19_reg;
        select_ln27_2_reg_740_pp0_iter21_reg <= select_ln27_2_reg_740_pp0_iter20_reg;
        select_ln27_2_reg_740_pp0_iter22_reg <= select_ln27_2_reg_740_pp0_iter21_reg;
        select_ln27_2_reg_740_pp0_iter23_reg <= select_ln27_2_reg_740_pp0_iter22_reg;
        select_ln27_2_reg_740_pp0_iter2_reg <= select_ln27_2_reg_740_pp0_iter1_reg;
        select_ln27_2_reg_740_pp0_iter3_reg <= select_ln27_2_reg_740_pp0_iter2_reg;
        select_ln27_2_reg_740_pp0_iter4_reg <= select_ln27_2_reg_740_pp0_iter3_reg;
        select_ln27_2_reg_740_pp0_iter5_reg <= select_ln27_2_reg_740_pp0_iter4_reg;
        select_ln27_2_reg_740_pp0_iter6_reg <= select_ln27_2_reg_740_pp0_iter5_reg;
        select_ln27_2_reg_740_pp0_iter7_reg <= select_ln27_2_reg_740_pp0_iter6_reg;
        select_ln27_2_reg_740_pp0_iter8_reg <= select_ln27_2_reg_740_pp0_iter7_reg;
        select_ln27_2_reg_740_pp0_iter9_reg <= select_ln27_2_reg_740_pp0_iter8_reg;
        select_ln27_3_reg_746_pp0_iter10_reg <= select_ln27_3_reg_746_pp0_iter9_reg;
        select_ln27_3_reg_746_pp0_iter11_reg <= select_ln27_3_reg_746_pp0_iter10_reg;
        select_ln27_3_reg_746_pp0_iter12_reg <= select_ln27_3_reg_746_pp0_iter11_reg;
        select_ln27_3_reg_746_pp0_iter13_reg <= select_ln27_3_reg_746_pp0_iter12_reg;
        select_ln27_3_reg_746_pp0_iter14_reg <= select_ln27_3_reg_746_pp0_iter13_reg;
        select_ln27_3_reg_746_pp0_iter15_reg <= select_ln27_3_reg_746_pp0_iter14_reg;
        select_ln27_3_reg_746_pp0_iter16_reg <= select_ln27_3_reg_746_pp0_iter15_reg;
        select_ln27_3_reg_746_pp0_iter17_reg <= select_ln27_3_reg_746_pp0_iter16_reg;
        select_ln27_3_reg_746_pp0_iter18_reg <= select_ln27_3_reg_746_pp0_iter17_reg;
        select_ln27_3_reg_746_pp0_iter19_reg <= select_ln27_3_reg_746_pp0_iter18_reg;
        select_ln27_3_reg_746_pp0_iter20_reg <= select_ln27_3_reg_746_pp0_iter19_reg;
        select_ln27_3_reg_746_pp0_iter21_reg <= select_ln27_3_reg_746_pp0_iter20_reg;
        select_ln27_3_reg_746_pp0_iter22_reg <= select_ln27_3_reg_746_pp0_iter21_reg;
        select_ln27_3_reg_746_pp0_iter23_reg <= select_ln27_3_reg_746_pp0_iter22_reg;
        select_ln27_3_reg_746_pp0_iter2_reg <= select_ln27_3_reg_746_pp0_iter1_reg;
        select_ln27_3_reg_746_pp0_iter3_reg <= select_ln27_3_reg_746_pp0_iter2_reg;
        select_ln27_3_reg_746_pp0_iter4_reg <= select_ln27_3_reg_746_pp0_iter3_reg;
        select_ln27_3_reg_746_pp0_iter5_reg <= select_ln27_3_reg_746_pp0_iter4_reg;
        select_ln27_3_reg_746_pp0_iter6_reg <= select_ln27_3_reg_746_pp0_iter5_reg;
        select_ln27_3_reg_746_pp0_iter7_reg <= select_ln27_3_reg_746_pp0_iter6_reg;
        select_ln27_3_reg_746_pp0_iter8_reg <= select_ln27_3_reg_746_pp0_iter7_reg;
        select_ln27_3_reg_746_pp0_iter9_reg <= select_ln27_3_reg_746_pp0_iter8_reg;
        select_ln27_reg_727_pp0_iter10_reg <= select_ln27_reg_727_pp0_iter9_reg;
        select_ln27_reg_727_pp0_iter11_reg <= select_ln27_reg_727_pp0_iter10_reg;
        select_ln27_reg_727_pp0_iter12_reg <= select_ln27_reg_727_pp0_iter11_reg;
        select_ln27_reg_727_pp0_iter13_reg <= select_ln27_reg_727_pp0_iter12_reg;
        select_ln27_reg_727_pp0_iter14_reg <= select_ln27_reg_727_pp0_iter13_reg;
        select_ln27_reg_727_pp0_iter15_reg <= select_ln27_reg_727_pp0_iter14_reg;
        select_ln27_reg_727_pp0_iter16_reg <= select_ln27_reg_727_pp0_iter15_reg;
        select_ln27_reg_727_pp0_iter17_reg <= select_ln27_reg_727_pp0_iter16_reg;
        select_ln27_reg_727_pp0_iter18_reg <= select_ln27_reg_727_pp0_iter17_reg;
        select_ln27_reg_727_pp0_iter19_reg <= select_ln27_reg_727_pp0_iter18_reg;
        select_ln27_reg_727_pp0_iter20_reg <= select_ln27_reg_727_pp0_iter19_reg;
        select_ln27_reg_727_pp0_iter21_reg <= select_ln27_reg_727_pp0_iter20_reg;
        select_ln27_reg_727_pp0_iter22_reg <= select_ln27_reg_727_pp0_iter21_reg;
        select_ln27_reg_727_pp0_iter23_reg <= select_ln27_reg_727_pp0_iter22_reg;
        select_ln27_reg_727_pp0_iter2_reg <= select_ln27_reg_727_pp0_iter1_reg;
        select_ln27_reg_727_pp0_iter3_reg <= select_ln27_reg_727_pp0_iter2_reg;
        select_ln27_reg_727_pp0_iter4_reg <= select_ln27_reg_727_pp0_iter3_reg;
        select_ln27_reg_727_pp0_iter5_reg <= select_ln27_reg_727_pp0_iter4_reg;
        select_ln27_reg_727_pp0_iter6_reg <= select_ln27_reg_727_pp0_iter5_reg;
        select_ln27_reg_727_pp0_iter7_reg <= select_ln27_reg_727_pp0_iter6_reg;
        select_ln27_reg_727_pp0_iter8_reg <= select_ln27_reg_727_pp0_iter7_reg;
        select_ln27_reg_727_pp0_iter9_reg <= select_ln27_reg_727_pp0_iter8_reg;
        tmp1_V_reg_781 <= m_axi_in1_V_RDATA;
        tmp2_V_reg_786 <= m_axi_in2_V_RDATA;
        tmp3_V_reg_791 <= m_axi_in3_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln27_reg_733_pp0_iter1_reg[26 : 5] <= add_ln27_reg_733[26 : 5];
        and_ln33_reg_750_pp0_iter1_reg <= and_ln33_reg_750;
        icmp_ln27_reg_718 <= icmp_ln27_fu_403_p2;
        icmp_ln27_reg_718_pp0_iter1_reg <= icmp_ln27_reg_718;
        select_ln27_2_reg_740_pp0_iter1_reg <= select_ln27_2_reg_740;
        select_ln27_3_reg_746_pp0_iter1_reg <= select_ln27_3_reg_746;
        select_ln27_reg_727_pp0_iter1_reg <= select_ln27_reg_727;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln27_3_fu_514_p3 == 1'd0) & (icmp_ln27_fu_403_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln33_reg_750 <= and_ln33_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_718_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_15_reg_765 <= empty_15_fu_600_p2;
        in1_V_addr_reg_759 <= sext_ln30_1_fu_590_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_403_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln27_2_reg_740 <= select_ln27_2_fu_488_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln30_reg_688[26 : 1] <= sext_ln30_fu_310_p1[26 : 1];
        zext_ln27_2_reg_713[30 : 0] <= zext_ln27_2_fu_342_p1[30 : 0];
        zext_ln30_1_reg_683[16 : 1] <= zext_ln30_1_fu_300_p1[16 : 1];
        zext_ln30_reg_677[16 : 1] <= zext_ln30_fu_288_p1[16 : 1];
        zext_ln31_1_reg_703[30 : 0] <= zext_ln31_1_fu_334_p1[30 : 0];
        zext_ln31_reg_693[17 : 1] <= zext_ln31_fu_320_p1[17 : 1];
        zext_ln32_1_reg_708[30 : 0] <= zext_ln32_1_fu_338_p1[30 : 0];
        zext_ln32_reg_698[17 : 1] <= zext_ln32_fu_330_p1[17 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_403_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_262_p4 = select_ln27_2_reg_740;
    end else begin
        ap_phi_mux_i_0_phi_fu_262_p4 = i_0_reg_258;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_250_p4 = add_ln27_4_reg_722;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_250_p4 = indvar_flatten_reg_246;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_0_V_address0 = zext_ln203_4_fu_670_p1;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_0_V_address0 = zext_ln203_2_fu_654_p1;
        end else begin
            fm_in_buff_0_V_address0 = 'bx;
        end
    end else begin
        fm_in_buff_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_0_V_ce0 = 1'b1;
    end else begin
        fm_in_buff_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_0_V_d0 = 16'd0;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_0_V_d0 = tmp1_V_reg_781;
        end else begin
            fm_in_buff_0_V_d0 = 'bx;
        end
    end else begin
        fm_in_buff_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_0_V_we0 = 1'b1;
    end else begin
        fm_in_buff_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_1_V_address0 = zext_ln203_4_fu_670_p1;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_1_V_address0 = zext_ln203_2_fu_654_p1;
        end else begin
            fm_in_buff_1_V_address0 = 'bx;
        end
    end else begin
        fm_in_buff_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_1_V_ce0 = 1'b1;
    end else begin
        fm_in_buff_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_1_V_d0 = 16'd0;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_1_V_d0 = tmp2_V_reg_786;
        end else begin
            fm_in_buff_1_V_d0 = 'bx;
        end
    end else begin
        fm_in_buff_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_1_V_we0 = 1'b1;
    end else begin
        fm_in_buff_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_2_V_address0 = zext_ln203_4_fu_670_p1;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_2_V_address0 = zext_ln203_2_fu_654_p1;
        end else begin
            fm_in_buff_2_V_address0 = 'bx;
        end
    end else begin
        fm_in_buff_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_2_V_ce0 = 1'b1;
    end else begin
        fm_in_buff_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1))) begin
        if (((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) begin
            fm_in_buff_2_V_d0 = 16'd0;
        end else if (((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg))) begin
            fm_in_buff_2_V_d0 = tmp3_V_reg_791;
        end else begin
            fm_in_buff_2_V_d0 = 'bx;
        end
    end else begin
        fm_in_buff_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter24 == 1'b1) & ((1'd0 == and_ln33_reg_750_pp0_iter23_reg) | (select_ln27_3_reg_746_pp0_iter23_reg == 1'd1))) | ((select_ln27_3_reg_746_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln33_reg_750_pp0_iter23_reg) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        fm_in_buff_2_V_we0 = 1'b1;
    end else begin
        fm_in_buff_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_526_ce = 1'b1;
    end else begin
        grp_fu_526_ce = 1'b0;
    end
end

always @ (*) begin
    if (((empty_15_reg_765 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        in1_V_blk_n_AR = m_axi_in1_V_ARREADY;
    end else begin
        in1_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        in1_V_blk_n_R = m_axi_in1_V_RVALID;
    end else begin
        in1_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((empty_15_reg_765 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        in2_V_blk_n_AR = m_axi_in2_V_ARREADY;
    end else begin
        in2_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        in2_V_blk_n_R = m_axi_in2_V_RVALID;
    end else begin
        in2_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((empty_15_reg_765 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        in3_V_blk_n_AR = m_axi_in3_V_ARREADY;
    end else begin
        in3_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        in3_V_blk_n_R = m_axi_in3_V_RVALID;
    end else begin
        in3_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_15_reg_765 == 1'd1) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        m_axi_in1_V_ARVALID = 1'b1;
    end else begin
        m_axi_in1_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        m_axi_in1_V_RREADY = 1'b1;
    end else begin
        m_axi_in1_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_15_reg_765 == 1'd1) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        m_axi_in2_V_ARVALID = 1'b1;
    end else begin
        m_axi_in2_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        m_axi_in2_V_RREADY = 1'b1;
    end else begin
        m_axi_in2_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_15_reg_765 == 1'd1) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        m_axi_in3_V_ARVALID = 1'b1;
    end else begin
        m_axi_in3_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        m_axi_in3_V_RREADY = 1'b1;
    end else begin
        m_axi_in3_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln27_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_664_p2 = (mul_ln203_fu_639_p2 + zext_ln203_3_fu_661_p1);

assign add_ln203_fu_648_p2 = (mul_ln203_fu_639_p2 + zext_ln203_1_fu_645_p1);

assign add_ln27_1_fu_561_p2 = ($signed(sext_ln30_reg_688) + $signed(add_ln27_reg_733_pp0_iter14_reg));

assign add_ln27_2_fu_569_p2 = (zext_ln31_reg_693 + add_ln27_reg_733_pp0_iter14_reg);

assign add_ln27_3_fu_577_p2 = (zext_ln32_reg_698 + add_ln27_reg_733_pp0_iter14_reg);

assign add_ln27_4_fu_409_p2 = (ap_phi_mux_indvar_flatten_phi_fu_250_p4 + 12'd1);

assign add_ln27_fu_482_p2 = ($signed(select_ln27_1_fu_474_p3) + $signed(27'd134217056));

assign add_ln30_1_fu_304_p2 = ($signed(zext_ln30_1_fu_300_p1) + $signed(18'd262141));

assign add_ln30_2_fu_439_p2 = (zext_ln30_reg_677 + zext_ln27_1_fu_435_p1);

assign add_ln30_3_fu_585_p2 = ($signed(sext_ln27_fu_565_p1) + $signed(zext_ln31_1_reg_703));

assign add_ln30_fu_350_p2 = (zext_ln27_fu_346_p1 + zext_ln30_reg_677);

assign add_ln31_1_fu_606_p2 = ($signed(zext_ln32_1_reg_708) + $signed(sext_ln27_1_fu_573_p1));

assign add_ln31_fu_314_p2 = (zext_ln30_1_fu_300_p1 + 18'd50173);

assign add_ln32_1_fu_621_p2 = ($signed(zext_ln27_2_reg_713) + $signed(sext_ln28_fu_581_p1));

assign add_ln32_fu_324_p2 = (zext_ln30_1_fu_300_p1 + 18'd100349);

assign add_ln33_fu_532_p2 = (zext_ln28_fu_522_p1 + zext_ln30_1_reg_683);

assign and_ln33_fu_549_p2 = (icmp_ln33_3_fu_543_p2 & icmp_ln33_2_fu_537_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter23 == 1'b1) & ((m_axi_in1_V_RVALID == 1'b0) | (m_axi_in3_V_RVALID == 1'b0) | (m_axi_in2_V_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state18_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter23 == 1'b1) & ((m_axi_in1_V_RVALID == 1'b0) | (m_axi_in3_V_RVALID == 1'b0) | (m_axi_in2_V_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state18_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = (((m_axi_in3_V_ARREADY == 1'b0) & (empty_15_reg_765 == 1'd1)) | ((m_axi_in2_V_ARREADY == 1'b0) & (empty_15_reg_765 == 1'd1)) | ((m_axi_in1_V_ARREADY == 1'b0) & (empty_15_reg_765 == 1'd1)));
end

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage0_iter23 = ((m_axi_in1_V_RVALID == 1'b0) | (m_axi_in3_V_RVALID == 1'b0) | (m_axi_in2_V_RVALID == 1'b0));
end

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_15_fu_600_p2 = ((grp_fu_526_p2 == 12'd0) ? 1'b1 : 1'b0);

assign grp_fu_526_p1 = 12'd61;

assign i_fu_415_p2 = (ap_phi_mux_i_0_phi_fu_262_p4 + 6'd1);

assign icmp_ln27_fu_403_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_250_p4 == 12'd3721) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_421_p2 = ((j_0_reg_269 == 6'd61) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_391_p2 = ((add_ln30_fu_350_p2 > 18'd226) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_537_p2 = ((add_ln33_fu_532_p2 > 18'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_3_fu_543_p2 = ((add_ln33_fu_532_p2 < 18'd227) ? 1'b1 : 1'b0);

assign icmp_ln33_4_fu_496_p2 = ((add_ln30_2_fu_439_p2 < 18'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_5_fu_502_p2 = ((add_ln30_2_fu_439_p2 > 18'd226) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_385_p2 = ((add_ln30_fu_350_p2 < 18'd3) ? 1'b1 : 1'b0);

assign j_fu_555_p2 = (select_ln27_fu_427_p3 + 6'd1);

assign m_axi_in1_V_ARADDR = in1_V_addr_reg_759;

assign m_axi_in1_V_ARBURST = 2'd0;

assign m_axi_in1_V_ARCACHE = 4'd0;

assign m_axi_in1_V_ARID = 1'd0;

assign m_axi_in1_V_ARLEN = 32'd61;

assign m_axi_in1_V_ARLOCK = 2'd0;

assign m_axi_in1_V_ARPROT = 3'd0;

assign m_axi_in1_V_ARQOS = 4'd0;

assign m_axi_in1_V_ARREGION = 4'd0;

assign m_axi_in1_V_ARSIZE = 3'd0;

assign m_axi_in1_V_ARUSER = 1'd0;

assign m_axi_in1_V_AWADDR = 32'd0;

assign m_axi_in1_V_AWBURST = 2'd0;

assign m_axi_in1_V_AWCACHE = 4'd0;

assign m_axi_in1_V_AWID = 1'd0;

assign m_axi_in1_V_AWLEN = 32'd0;

assign m_axi_in1_V_AWLOCK = 2'd0;

assign m_axi_in1_V_AWPROT = 3'd0;

assign m_axi_in1_V_AWQOS = 4'd0;

assign m_axi_in1_V_AWREGION = 4'd0;

assign m_axi_in1_V_AWSIZE = 3'd0;

assign m_axi_in1_V_AWUSER = 1'd0;

assign m_axi_in1_V_AWVALID = 1'b0;

assign m_axi_in1_V_BREADY = 1'b0;

assign m_axi_in1_V_WDATA = 16'd0;

assign m_axi_in1_V_WID = 1'd0;

assign m_axi_in1_V_WLAST = 1'b0;

assign m_axi_in1_V_WSTRB = 2'd0;

assign m_axi_in1_V_WUSER = 1'd0;

assign m_axi_in1_V_WVALID = 1'b0;

assign m_axi_in2_V_ARADDR = in2_V_addr_reg_769;

assign m_axi_in2_V_ARBURST = 2'd0;

assign m_axi_in2_V_ARCACHE = 4'd0;

assign m_axi_in2_V_ARID = 1'd0;

assign m_axi_in2_V_ARLEN = 32'd61;

assign m_axi_in2_V_ARLOCK = 2'd0;

assign m_axi_in2_V_ARPROT = 3'd0;

assign m_axi_in2_V_ARQOS = 4'd0;

assign m_axi_in2_V_ARREGION = 4'd0;

assign m_axi_in2_V_ARSIZE = 3'd0;

assign m_axi_in2_V_ARUSER = 1'd0;

assign m_axi_in2_V_AWADDR = 32'd0;

assign m_axi_in2_V_AWBURST = 2'd0;

assign m_axi_in2_V_AWCACHE = 4'd0;

assign m_axi_in2_V_AWID = 1'd0;

assign m_axi_in2_V_AWLEN = 32'd0;

assign m_axi_in2_V_AWLOCK = 2'd0;

assign m_axi_in2_V_AWPROT = 3'd0;

assign m_axi_in2_V_AWQOS = 4'd0;

assign m_axi_in2_V_AWREGION = 4'd0;

assign m_axi_in2_V_AWSIZE = 3'd0;

assign m_axi_in2_V_AWUSER = 1'd0;

assign m_axi_in2_V_AWVALID = 1'b0;

assign m_axi_in2_V_BREADY = 1'b0;

assign m_axi_in2_V_WDATA = 16'd0;

assign m_axi_in2_V_WID = 1'd0;

assign m_axi_in2_V_WLAST = 1'b0;

assign m_axi_in2_V_WSTRB = 2'd0;

assign m_axi_in2_V_WUSER = 1'd0;

assign m_axi_in2_V_WVALID = 1'b0;

assign m_axi_in3_V_ARADDR = in3_V_addr_reg_775;

assign m_axi_in3_V_ARBURST = 2'd0;

assign m_axi_in3_V_ARCACHE = 4'd0;

assign m_axi_in3_V_ARID = 1'd0;

assign m_axi_in3_V_ARLEN = 32'd61;

assign m_axi_in3_V_ARLOCK = 2'd0;

assign m_axi_in3_V_ARPROT = 3'd0;

assign m_axi_in3_V_ARQOS = 4'd0;

assign m_axi_in3_V_ARREGION = 4'd0;

assign m_axi_in3_V_ARSIZE = 3'd0;

assign m_axi_in3_V_ARUSER = 1'd0;

assign m_axi_in3_V_AWADDR = 32'd0;

assign m_axi_in3_V_AWBURST = 2'd0;

assign m_axi_in3_V_AWCACHE = 4'd0;

assign m_axi_in3_V_AWID = 1'd0;

assign m_axi_in3_V_AWLEN = 32'd0;

assign m_axi_in3_V_AWLOCK = 2'd0;

assign m_axi_in3_V_AWPROT = 3'd0;

assign m_axi_in3_V_AWQOS = 4'd0;

assign m_axi_in3_V_AWREGION = 4'd0;

assign m_axi_in3_V_AWSIZE = 3'd0;

assign m_axi_in3_V_AWUSER = 1'd0;

assign m_axi_in3_V_AWVALID = 1'b0;

assign m_axi_in3_V_BREADY = 1'b0;

assign m_axi_in3_V_WDATA = 16'd0;

assign m_axi_in3_V_WID = 1'd0;

assign m_axi_in3_V_WLAST = 1'b0;

assign m_axi_in3_V_WSTRB = 2'd0;

assign m_axi_in3_V_WUSER = 1'd0;

assign m_axi_in3_V_WVALID = 1'b0;

assign mul_ln203_fu_639_p0 = mul_ln203_fu_639_p00;

assign mul_ln203_fu_639_p00 = select_ln27_2_reg_740_pp0_iter23_reg;

assign mul_ln203_fu_639_p2 = (mul_ln203_fu_639_p0 * $signed('h3D));

assign or_ln33_1_fu_508_p2 = (icmp_ln33_5_fu_502_p2 | icmp_ln33_4_fu_496_p2);

assign or_ln33_fu_397_p2 = (icmp_ln33_fu_385_p2 | icmp_ln33_1_fu_391_p2);

assign select_ln27_1_fu_474_p3 = ((icmp_ln28_fu_421_p2[0:0] === 1'b1) ? sub_ln30_1_fu_468_p2 : sub_ln30_fu_379_p2);

assign select_ln27_2_fu_488_p3 = ((icmp_ln28_fu_421_p2[0:0] === 1'b1) ? i_fu_415_p2 : ap_phi_mux_i_0_phi_fu_262_p4);

assign select_ln27_3_fu_514_p3 = ((icmp_ln28_fu_421_p2[0:0] === 1'b1) ? or_ln33_1_fu_508_p2 : or_ln33_fu_397_p2);

assign select_ln27_fu_427_p3 = ((icmp_ln28_fu_421_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_269);

assign sext_ln27_1_fu_573_p1 = $signed(add_ln27_2_fu_569_p2);

assign sext_ln27_fu_565_p1 = $signed(add_ln27_1_fu_561_p2);

assign sext_ln28_fu_581_p1 = $signed(add_ln27_3_fu_577_p2);

assign sext_ln30_1_fu_590_p1 = $signed(add_ln30_3_fu_585_p2);

assign sext_ln30_fu_310_p1 = $signed(add_ln30_1_fu_304_p2);

assign sext_ln31_fu_611_p1 = $signed(add_ln31_1_fu_606_p2);

assign sext_ln32_fu_626_p1 = $signed(add_ln32_1_fu_621_p2);

assign shl_ln30_1_fu_292_p3 = {{fm_col}, {1'd0}};

assign shl_ln30_2_fu_355_p3 = {{add_ln30_fu_350_p2}, {8'd0}};

assign shl_ln30_2_mid1_fu_444_p3 = {{add_ln30_2_fu_439_p2}, {8'd0}};

assign shl_ln30_3_fu_367_p3 = {{add_ln30_fu_350_p2}, {5'd0}};

assign shl_ln30_3_mid1_fu_456_p3 = {{add_ln30_2_fu_439_p2}, {5'd0}};

assign shl_ln_fu_280_p3 = {{fm_row}, {1'd0}};

assign sub_ln30_1_fu_468_p2 = (zext_ln30_4_fu_452_p1 - zext_ln30_5_fu_464_p1);

assign sub_ln30_fu_379_p2 = (zext_ln30_2_fu_363_p1 - zext_ln30_3_fu_375_p1);

assign zext_ln203_1_fu_645_p1 = select_ln27_reg_727_pp0_iter23_reg;

assign zext_ln203_2_fu_654_p1 = add_ln203_fu_648_p2;

assign zext_ln203_3_fu_661_p1 = select_ln27_reg_727_pp0_iter23_reg;

assign zext_ln203_4_fu_670_p1 = add_ln203_1_fu_664_p2;

assign zext_ln27_1_fu_435_p1 = i_fu_415_p2;

assign zext_ln27_2_fu_342_p1 = in3_V_offset;

assign zext_ln27_fu_346_p1 = ap_phi_mux_i_0_phi_fu_262_p4;

assign zext_ln28_fu_522_p1 = select_ln27_fu_427_p3;

assign zext_ln30_1_fu_300_p1 = shl_ln30_1_fu_292_p3;

assign zext_ln30_2_fu_363_p1 = shl_ln30_2_fu_355_p3;

assign zext_ln30_3_fu_375_p1 = shl_ln30_3_fu_367_p3;

assign zext_ln30_4_fu_452_p1 = shl_ln30_2_mid1_fu_444_p3;

assign zext_ln30_5_fu_464_p1 = shl_ln30_3_mid1_fu_456_p3;

assign zext_ln30_fu_288_p1 = shl_ln_fu_280_p3;

assign zext_ln31_1_fu_334_p1 = in1_V_offset;

assign zext_ln31_fu_320_p1 = add_ln31_fu_314_p2;

assign zext_ln32_1_fu_338_p1 = in2_V_offset;

assign zext_ln32_fu_330_p1 = add_ln32_fu_324_p2;

always @ (posedge ap_clk) begin
    zext_ln30_reg_677[0] <= 1'b0;
    zext_ln30_reg_677[17] <= 1'b0;
    zext_ln30_1_reg_683[0] <= 1'b0;
    zext_ln30_1_reg_683[17] <= 1'b0;
    sext_ln30_reg_688[0] <= 1'b1;
    zext_ln31_reg_693[0] <= 1'b1;
    zext_ln31_reg_693[26:18] <= 9'b000000000;
    zext_ln32_reg_698[0] <= 1'b1;
    zext_ln32_reg_698[26:18] <= 9'b000000000;
    zext_ln31_1_reg_703[32:31] <= 2'b00;
    zext_ln32_1_reg_708[32:31] <= 2'b00;
    zext_ln27_2_reg_713[32:31] <= 2'b00;
    add_ln27_reg_733[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter1_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter2_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter3_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter4_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter5_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter6_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter7_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter8_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter9_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter10_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter11_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter12_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter13_reg[4:0] <= 5'b00000;
    add_ln27_reg_733_pp0_iter14_reg[4:0] <= 5'b00000;
end

endmodule //load_input
