

================================================================
== Vivado HLS Report for 'store_output'
================================================================
* Date:           Tue Mar 19 14:53:38 2024

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        test_conv
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg400-2


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.750 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-------+-------+---------+
    |  Latency (cycles) |  Latency (absolute) |    Interval   | Pipeline|
    |   min   |   max   |    min   |    max   |  min  |  max  |   Type  |
    +---------+---------+----------+----------+-------+-------+---------+
    |    57353|    57353| 0.574 ms | 0.574 ms |  57353|  57353|   none  |
    +---------+---------+----------+----------+-------+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                     |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Loop 1             |    57352|    57352|     14338|          -|          -|     4|    no    |
        | + Loop 1.1          |    14336|    14336|       512|          -|          -|    28|    no    |
        |  ++ Loop 1.1.1      |      504|      504|        18|          -|          -|    28|    no    |
        |   +++ Loop 1.1.1.1  |       16|       16|         4|          -|          -|     4|    no    |
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 14
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 2 
4 --> 5 
5 --> 6 
6 --> 11 7 
7 --> 8 6 
8 --> 9 
9 --> 10 
10 --> 7 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 3 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.46>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%p_Val2_s = alloca i64"   --->   Operation 15 'alloca' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%fm_col_read = call i16 @_ssdm_op_Read.ap_auto.i16(i16 %fm_col)"   --->   Operation 16 'read' 'fm_col_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%fm_row_read = call i16 @_ssdm_op_Read.ap_auto.i16(i16 %fm_row)"   --->   Operation 17 'read' 'fm_row_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%m_read = call i7 @_ssdm_op_Read.ap_auto.i7(i7 %m)"   --->   Operation 18 'read' 'm_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%out_V_offset_read = call i29 @_ssdm_op_Read.ap_auto.i29(i29 %out_V_offset)"   --->   Operation 19 'read' 'out_V_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %out_V, [6 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 100352, [4 x i8]* @p_str6, [6 x i8]* @p_str7, [1 x i8]* @p_str1, i32 16, i32 16, i32 64, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 20 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln64 = zext i16 %fm_row_read to i17" [test_conv/src/test.cpp:64]   --->   Operation 21 'zext' 'zext_ln64' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%zext_ln64_1 = zext i16 %fm_col_read to i33" [test_conv/src/test.cpp:64]   --->   Operation 22 'zext' 'zext_ln64_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%zext_ln56 = zext i29 %out_V_offset_read to i34" [test_conv/src/test.cpp:56]   --->   Operation 23 'zext' 'zext_ln56' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.46ns)   --->   "br label %1" [test_conv/src/test.cpp:56]   --->   Operation 24 'br' <Predicate = true> <Delay = 0.46>

State 2 <SV = 1> <Delay = 6.86>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%mm_0 = phi i5 [ 0, %0 ], [ %mm, %4 ]"   --->   Operation 25 'phi' 'mm_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%tmp = call i1 @_ssdm_op_BitSelect.i1.i5.i32(i5 %mm_0, i32 4)" [test_conv/src/test.cpp:56]   --->   Operation 26 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 27 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "br i1 %tmp, label %5, label %.preheader49.preheader" [test_conv/src/test.cpp:56]   --->   Operation 28 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%zext_ln64_2 = zext i5 %mm_0 to i7" [test_conv/src/test.cpp:64]   --->   Operation 29 'zext' 'zext_ln64_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (1.31ns)   --->   "%add_ln64 = add i7 %zext_ln64_2, %m_read" [test_conv/src/test.cpp:64]   --->   Operation 30 'add' 'add_ln64' <Predicate = (!tmp)> <Delay = 1.31> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%trunc_ln1 = call i5 @_ssdm_op_PartSelect.i5.i7.i32.i32(i7 %add_ln64, i32 2, i32 6)" [test_conv/src/test.cpp:64]   --->   Operation 31 'partselect' 'trunc_ln1' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%zext_ln64_3 = zext i5 %trunc_ln1 to i20" [test_conv/src/test.cpp:64]   --->   Operation 32 'zext' 'zext_ln64_3' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (5.55ns) (root node of the DSP)   --->   "%mul_ln64 = mul i20 %zext_ln64_3, 12544" [test_conv/src/test.cpp:64]   --->   Operation 33 'mul' 'mul_ln64' <Predicate = (!tmp)> <Delay = 5.55> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 5.55> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln57 = zext i20 %mul_ln64 to i33" [test_conv/src/test.cpp:57]   --->   Operation 34 'zext' 'zext_ln57' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.46ns)   --->   "br label %.preheader49" [test_conv/src/test.cpp:57]   --->   Operation 35 'br' <Predicate = (!tmp)> <Delay = 0.46>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "ret void" [test_conv/src/test.cpp:67]   --->   Operation 36 'ret' <Predicate = (tmp)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.84>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%i_0 = phi i5 [ %i, %3 ], [ 0, %.preheader49.preheader ]"   --->   Operation 37 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "%zext_ln57_1 = zext i5 %i_0 to i17" [test_conv/src/test.cpp:57]   --->   Operation 38 'zext' 'zext_ln57_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 39 [1/1] (0.97ns)   --->   "%icmp_ln57 = icmp eq i5 %i_0, -4" [test_conv/src/test.cpp:57]   --->   Operation 39 'icmp' 'icmp_ln57' <Predicate = true> <Delay = 0.97> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.07> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 28, i64 28, i64 28)"   --->   Operation 40 'speclooptripcount' 'empty_9' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (1.02ns)   --->   "%i = add i5 %i_0, 1" [test_conv/src/test.cpp:57]   --->   Operation 41 'add' 'i' <Predicate = true> <Delay = 1.02> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 42 [1/1] (0.00ns)   --->   "br i1 %icmp_ln57, label %4, label %.preheader48.preheader" [test_conv/src/test.cpp:57]   --->   Operation 42 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 43 [1/1] (1.54ns)   --->   "%add_ln64_1 = add i17 %zext_ln57_1, %zext_ln64" [test_conv/src/test.cpp:64]   --->   Operation 43 'add' 'add_ln64_1' <Predicate = (!icmp_ln57)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%shl_ln = call i24 @_ssdm_op_BitConcatenate.i24.i17.i7(i17 %add_ln64_1, i7 0)" [test_conv/src/test.cpp:64]   --->   Operation 44 'bitconcatenate' 'shl_ln' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%zext_ln64_5 = zext i24 %shl_ln to i25" [test_conv/src/test.cpp:64]   --->   Operation 45 'zext' 'zext_ln64_5' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%shl_ln64_1 = call i21 @_ssdm_op_BitConcatenate.i21.i17.i4(i17 %add_ln64_1, i4 0)" [test_conv/src/test.cpp:64]   --->   Operation 46 'bitconcatenate' 'shl_ln64_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln64_6 = zext i21 %shl_ln64_1 to i25" [test_conv/src/test.cpp:64]   --->   Operation 47 'zext' 'zext_ln64_6' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (1.68ns)   --->   "%sub_ln64 = sub i25 %zext_ln64_5, %zext_ln64_6" [test_conv/src/test.cpp:64]   --->   Operation 48 'sub' 'sub_ln64' <Predicate = (!icmp_ln57)> <Delay = 1.68> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%sext_ln64 = sext i25 %sub_ln64 to i32" [test_conv/src/test.cpp:64]   --->   Operation 49 'sext' 'sext_ln64' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%zext_ln58 = zext i32 %sext_ln64 to i33" [test_conv/src/test.cpp:58]   --->   Operation 50 'zext' 'zext_ln58' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln64_2 = add i33 %zext_ln57, %zext_ln58" [test_conv/src/test.cpp:64]   --->   Operation 51 'add' 'add_ln64_2' <Predicate = (!icmp_ln57)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.57> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 52 [1/1] (3.61ns) (root node of TernaryAdder)   --->   "%add_ln64_3 = add i33 %zext_ln64_1, %add_ln64_2" [test_conv/src/test.cpp:64]   --->   Operation 52 'add' 'add_ln64_3' <Predicate = (!icmp_ln57)> <Delay = 3.61> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.57> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 53 [1/1] (1.02ns)   --->   "%mm = add i5 %mm_0, 4" [test_conv/src/test.cpp:56]   --->   Operation 53 'add' 'mm' <Predicate = (icmp_ln57)> <Delay = 1.02> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "br label %1" [test_conv/src/test.cpp:56]   --->   Operation 54 'br' <Predicate = (icmp_ln57)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 1.92>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "%zext_ln180 = zext i33 %add_ln64_3 to i34" [test_conv/src/test.cpp:64]   --->   Operation 55 'zext' 'zext_ln180' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (1.92ns)   --->   "%add_ln180 = add i34 %zext_ln180, %zext_ln56" [test_conv/src/test.cpp:64]   --->   Operation 56 'add' 'add_ln180' <Predicate = true> <Delay = 1.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 57 [1/1] (0.00ns)   --->   "%zext_ln64_4 = zext i5 %i_0 to i12" [test_conv/src/test.cpp:64]   --->   Operation 57 'zext' 'zext_ln64_4' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "%zext_ln180_1 = zext i34 %add_ln180 to i64" [test_conv/src/test.cpp:64]   --->   Operation 58 'zext' 'zext_ln180_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (0.00ns)   --->   "%out_V_addr = getelementptr i64* %out_V, i64 %zext_ln180_1" [test_conv/src/test.cpp:64]   --->   Operation 59 'getelementptr' 'out_V_addr' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 60 [1/1] (8.75ns)   --->   "%out_V_addr_wr_req = call i1 @_ssdm_op_WriteReq.m_axi.i64P(i64* %out_V_addr, i32 28)" [test_conv/src/test.cpp:64]   --->   Operation 60 'writereq' 'out_V_addr_wr_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 61 [1/1] (0.46ns)   --->   "br label %.preheader48" [test_conv/src/test.cpp:58]   --->   Operation 61 'br' <Predicate = true> <Delay = 0.46>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 62 [1/1] (0.00ns)   --->   "%j_0 = phi i5 [ %j, %2 ], [ 0, %.preheader48.preheader ]"   --->   Operation 62 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 63 [1/1] (0.97ns)   --->   "%icmp_ln58 = icmp eq i5 %j_0, -4" [test_conv/src/test.cpp:58]   --->   Operation 63 'icmp' 'icmp_ln58' <Predicate = true> <Delay = 0.97> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.07> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 64 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 28, i64 28, i64 28)"   --->   Operation 64 'speclooptripcount' 'empty_10' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 65 [1/1] (1.02ns)   --->   "%j = add i5 %j_0, 1" [test_conv/src/test.cpp:58]   --->   Operation 65 'add' 'j' <Predicate = true> <Delay = 1.02> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 66 [1/1] (0.00ns)   --->   "br i1 %icmp_ln58, label %3, label %.preheader.preheader" [test_conv/src/test.cpp:58]   --->   Operation 66 'br' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 67 [1/1] (0.00ns)   --->   "%zext_ln60 = zext i5 %j_0 to i15" [test_conv/src/test.cpp:60]   --->   Operation 67 'zext' 'zext_ln60' <Predicate = (!icmp_ln58)> <Delay = 0.00>
ST_6 : Operation 68 [1/1] (0.46ns)   --->   "br label %.preheader" [test_conv/src/test.cpp:60]   --->   Operation 68 'br' <Predicate = (!icmp_ln58)> <Delay = 0.46>
ST_6 : Operation 69 [5/5] (8.75ns)   --->   "%out_V_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %out_V_addr)" [test_conv/src/test.cpp:64]   --->   Operation 69 'writeresp' 'out_V_addr_wr_resp' <Predicate = (icmp_ln58)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 70 [1/1] (0.00ns)   --->   "%k_0 = phi i3 [ %k, %_ifconv ], [ 0, %.preheader.preheader ]"   --->   Operation 70 'phi' 'k_0' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 71 [1/1] (0.00ns)   --->   "%zext_ln60_1 = zext i3 %k_0 to i5" [test_conv/src/test.cpp:60]   --->   Operation 71 'zext' 'zext_ln60_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 72 [1/1] (0.98ns)   --->   "%icmp_ln60 = icmp eq i3 %k_0, -4" [test_conv/src/test.cpp:60]   --->   Operation 72 'icmp' 'icmp_ln60' <Predicate = true> <Delay = 0.98> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.07> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 73 [1/1] (0.00ns)   --->   "%empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)"   --->   Operation 73 'speclooptripcount' 'empty_11' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 74 [1/1] (0.76ns)   --->   "%k = add i3 %k_0, 1" [test_conv/src/test.cpp:60]   --->   Operation 74 'add' 'k' <Predicate = true> <Delay = 0.76> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 75 [1/1] (0.00ns)   --->   "br i1 %icmp_ln60, label %2, label %_ifconv" [test_conv/src/test.cpp:60]   --->   Operation 75 'br' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 76 [1/1] (0.00ns)   --->   "%trunc_ln62 = trunc i3 %k_0 to i2" [test_conv/src/test.cpp:62]   --->   Operation 76 'trunc' 'trunc_ln62' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 77 [1/1] (1.02ns)   --->   "%add_ln62 = add i5 %zext_ln60_1, %mm_0" [test_conv/src/test.cpp:62]   --->   Operation 77 'add' 'add_ln62' <Predicate = (!icmp_ln60)> <Delay = 1.02> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 78 [1/1] (0.00ns)   --->   "%tmp_1 = call i10 @_ssdm_op_BitConcatenate.i10.i5.i5(i5 %add_ln62, i5 0)" [test_conv/src/test.cpp:62]   --->   Operation 78 'bitconcatenate' 'tmp_1' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 79 [1/1] (0.00ns)   --->   "%zext_ln62 = zext i10 %tmp_1 to i11" [test_conv/src/test.cpp:62]   --->   Operation 79 'zext' 'zext_ln62' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 80 [1/1] (0.00ns)   --->   "%tmp_2 = call i7 @_ssdm_op_BitConcatenate.i7.i5.i2(i5 %add_ln62, i2 0)" [test_conv/src/test.cpp:62]   --->   Operation 80 'bitconcatenate' 'tmp_2' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln62_1 = zext i7 %tmp_2 to i11" [test_conv/src/test.cpp:62]   --->   Operation 81 'zext' 'zext_ln62_1' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 82 [1/1] (1.41ns)   --->   "%sub_ln62 = sub i11 %zext_ln62, %zext_ln62_1" [test_conv/src/test.cpp:62]   --->   Operation 82 'sub' 'sub_ln62' <Predicate = (!icmp_ln60)> <Delay = 1.41> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 83 [1/1] (0.00ns)   --->   "%sext_ln62 = sext i11 %sub_ln62 to i12" [test_conv/src/test.cpp:62]   --->   Operation 83 'sext' 'sext_ln62' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 84 [1/1] (1.48ns)   --->   "%add_ln62_1 = add i12 %zext_ln64_4, %sext_ln62" [test_conv/src/test.cpp:62]   --->   Operation 84 'add' 'add_ln62_1' <Predicate = (!icmp_ln60)> <Delay = 1.48> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 85 [1/1] (0.00ns)   --->   "%trunc_ln62_1 = trunc i12 %add_ln62_1 to i10" [test_conv/src/test.cpp:62]   --->   Operation 85 'trunc' 'trunc_ln62_1' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 86 [1/1] (0.00ns)   --->   "%p_shl_cast = call i15 @_ssdm_op_BitConcatenate.i15.i10.i5(i10 %trunc_ln62_1, i5 0)" [test_conv/src/test.cpp:62]   --->   Operation 86 'bitconcatenate' 'p_shl_cast' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 87 [1/1] (0.00ns)   --->   "%tmp_3 = call i14 @_ssdm_op_BitConcatenate.i14.i12.i2(i12 %add_ln62_1, i2 0)" [test_conv/src/test.cpp:62]   --->   Operation 87 'bitconcatenate' 'tmp_3' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 88 [1/1] (0.00ns)   --->   "%sext_ln62_1 = sext i14 %tmp_3 to i15" [test_conv/src/test.cpp:62]   --->   Operation 88 'sext' 'sext_ln62_1' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 89 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln62_1 = sub i15 %p_shl_cast, %sext_ln62_1" [test_conv/src/test.cpp:62]   --->   Operation 89 'sub' 'sub_ln62_1' <Predicate = (!icmp_ln60)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.57> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 90 [1/1] (3.15ns) (root node of TernaryAdder)   --->   "%add_ln62_2 = add i15 %zext_ln60, %sub_ln62_1" [test_conv/src/test.cpp:62]   --->   Operation 90 'add' 'add_ln62_2' <Predicate = (!icmp_ln60)> <Delay = 3.15> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.57> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 91 [1/1] (0.00ns)   --->   "%p_Val2_load = load i64* %p_Val2_s" [test_conv/src/test.cpp:64]   --->   Operation 91 'load' 'p_Val2_load' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_7 : Operation 92 [1/1] (8.75ns)   --->   "call void @_ssdm_op_Write.m_axi.i64P(i64* %out_V_addr, i64 %p_Val2_load, i8 -1)" [test_conv/src/test.cpp:64]   --->   Operation 92 'write' <Predicate = (icmp_ln60)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 93 [1/1] (0.00ns)   --->   "br label %.preheader48" [test_conv/src/test.cpp:58]   --->   Operation 93 'br' <Predicate = (icmp_ln60)> <Delay = 0.00>

State 8 <SV = 7> <Delay = 2.77>
ST_8 : Operation 94 [1/1] (0.00ns)   --->   "%zext_ln62_2 = zext i15 %add_ln62_2 to i64" [test_conv/src/test.cpp:62]   --->   Operation 94 'zext' 'zext_ln62_2' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 95 [1/1] (0.00ns)   --->   "%fm_out_buff_V_addr = getelementptr [12544 x i16]* %fm_out_buff_V, i64 0, i64 %zext_ln62_2" [test_conv/src/test.cpp:62]   --->   Operation 95 'getelementptr' 'fm_out_buff_V_addr' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 96 [2/2] (2.77ns)   --->   "%fm_out_buff_V_load = load i16* %fm_out_buff_V_addr, align 2" [test_conv/src/test.cpp:62]   --->   Operation 96 'load' 'fm_out_buff_V_load' <Predicate = true> <Delay = 2.77> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.77> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 12544> <RAM>

State 9 <SV = 8> <Delay = 8.03>
ST_9 : Operation 97 [1/1] (0.00ns)   --->   "%Lo_assign = call i6 @_ssdm_op_BitConcatenate.i6.i2.i4(i2 %trunc_ln62, i4 0)" [test_conv/src/test.cpp:62]   --->   Operation 97 'bitconcatenate' 'Lo_assign' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 98 [1/1] (0.00ns)   --->   "%or_ln62 = or i6 %Lo_assign, 15" [test_conv/src/test.cpp:62]   --->   Operation 98 'or' 'or_ln62' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 99 [1/2] (2.77ns)   --->   "%fm_out_buff_V_load = load i16* %fm_out_buff_V_addr, align 2" [test_conv/src/test.cpp:62]   --->   Operation 99 'load' 'fm_out_buff_V_load' <Predicate = true> <Delay = 2.77> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.77> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 12544> <RAM>
ST_9 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%tmp_4 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %fm_out_buff_V_load, i32 15)" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 100 'bitselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 101 [1/1] (2.13ns)   --->   "%icmp_ln1494 = icmp sgt i16 %fm_out_buff_V_load, 6144" [test_conv/src/test.cpp:14->test_conv/src/test.cpp:62]   --->   Operation 101 'icmp' 'icmp_ln1494' <Predicate = true> <Delay = 2.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.07> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 102 [1/1] (0.00ns)   --->   "%tmp_5 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %fm_out_buff_V_load, i32 15)" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 102 'bitselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 103 [1/1] (0.00ns)   --->   "%tmp_7 = call i14 @_ssdm_op_BitConcatenate.i14.i1.i1.i1.i11(i1 %tmp_5, i1 false, i1 %tmp_5, i11 0)" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 103 'bitconcatenate' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 104 [1/1] (0.00ns)   --->   "%sext_ln1495 = sext i14 %tmp_7 to i15" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 104 'sext' 'sext_ln1495' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 105 [1/1] (1.52ns)   --->   "%add_ln1495 = add i15 6144, %sext_ln1495" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 105 'add' 'add_ln1495' <Predicate = true> <Delay = 1.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%sext_ln1495_1 = sext i15 %add_ln1495 to i16" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 106 'sext' 'sext_ln1495_1' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 107 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%or_ln1495 = or i1 %tmp_4, %icmp_ln1494" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 107 'or' 'or_ln1495' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%p_Val2_2 = select i1 %or_ln1495, i16 %sext_ln1495_1, i16 %fm_out_buff_V_load" [test_conv/src/test.cpp:12->test_conv/src/test.cpp:62]   --->   Operation 108 'select' 'p_Val2_2' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%tmp_V_1 = zext i16 %p_Val2_2 to i64" [test_conv/src/test.cpp:62]   --->   Operation 109 'zext' 'tmp_V_1' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 110 [1/1] (1.07ns)   --->   "%icmp_ln414 = icmp ugt i6 %Lo_assign, %or_ln62" [test_conv/src/test.cpp:62]   --->   Operation 110 'icmp' 'icmp_ln414' <Predicate = true> <Delay = 1.07> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.07> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 111 [1/1] (0.00ns)   --->   "%zext_ln414 = zext i6 %Lo_assign to i7" [test_conv/src/test.cpp:62]   --->   Operation 111 'zext' 'zext_ln414' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 112 [1/1] (0.00ns) (grouped into LUT with out node select_ln414_2)   --->   "%xor_ln414 = xor i7 %zext_ln414, 63" [test_conv/src/test.cpp:62]   --->   Operation 112 'xor' 'xor_ln414' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 113 [1/1] (0.80ns) (out node of the LUT)   --->   "%select_ln414_2 = select i1 %icmp_ln414, i7 %xor_ln414, i7 %zext_ln414" [test_conv/src/test.cpp:62]   --->   Operation 113 'select' 'select_ln414_2' <Predicate = true> <Delay = 0.80> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node shl_ln414)   --->   "%zext_ln414_2 = zext i7 %select_ln414_2 to i64" [test_conv/src/test.cpp:62]   --->   Operation 114 'zext' 'zext_ln414_2' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 115 [1/1] (3.12ns) (out node of the LUT)   --->   "%shl_ln414 = shl i64 %tmp_V_1, %zext_ln414_2" [test_conv/src/test.cpp:62]   --->   Operation 115 'shl' 'shl_ln414' <Predicate = true> <Delay = 3.12> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.48> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>

State 10 <SV = 9> <Delay = 3.65>
ST_10 : Operation 116 [1/1] (0.00ns)   --->   "%p_Val2_load_1 = load i64* %p_Val2_s" [test_conv/src/test.cpp:62]   --->   Operation 116 'load' 'p_Val2_load_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 117 [1/1] (0.00ns)   --->   "%zext_ln414_1 = zext i6 %or_ln62 to i7" [test_conv/src/test.cpp:62]   --->   Operation 117 'zext' 'zext_ln414_1' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%select_ln414 = select i1 %icmp_ln414, i7 %zext_ln414, i7 %zext_ln414_1" [test_conv/src/test.cpp:62]   --->   Operation 118 'select' 'select_ln414' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%select_ln414_1 = select i1 %icmp_ln414, i7 %zext_ln414_1, i7 %zext_ln414" [test_conv/src/test.cpp:62]   --->   Operation 119 'select' 'select_ln414_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%xor_ln414_1 = xor i7 %select_ln414, 63" [test_conv/src/test.cpp:62]   --->   Operation 120 'xor' 'xor_ln414_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%zext_ln414_3 = zext i7 %select_ln414_1 to i64" [test_conv/src/test.cpp:62]   --->   Operation 121 'zext' 'zext_ln414_3' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 122 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%zext_ln414_4 = zext i7 %xor_ln414_1 to i64" [test_conv/src/test.cpp:62]   --->   Operation 122 'zext' 'zext_ln414_4' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node p_Result_s)   --->   "%tmp_6 = call i64 @llvm.part.select.i64(i64 %shl_ln414, i32 63, i32 0)" [test_conv/src/test.cpp:62]   --->   Operation 123 'partselect' 'tmp_6' <Predicate = (icmp_ln414)> <Delay = 0.00>
ST_10 : Operation 124 [1/1] (0.00ns) (grouped into LUT with out node p_Result_s)   --->   "%select_ln414_3 = select i1 %icmp_ln414, i64 %tmp_6, i64 %shl_ln414" [test_conv/src/test.cpp:62]   --->   Operation 124 'select' 'select_ln414_3' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 125 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%shl_ln414_1 = shl i64 -1, %zext_ln414_3" [test_conv/src/test.cpp:62]   --->   Operation 125 'shl' 'shl_ln414_1' <Predicate = true> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.48> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 126 [1/1] (0.00ns) (grouped into LUT with out node and_ln414)   --->   "%lshr_ln414 = lshr i64 -1, %zext_ln414_4" [test_conv/src/test.cpp:62]   --->   Operation 126 'lshr' 'lshr_ln414' <Predicate = true> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 2.48> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 127 [1/1] (2.48ns) (out node of the LUT)   --->   "%and_ln414 = and i64 %shl_ln414_1, %lshr_ln414" [test_conv/src/test.cpp:62]   --->   Operation 127 'and' 'and_ln414' <Predicate = true> <Delay = 2.48> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 128 [1/1] (0.00ns) (grouped into LUT with out node p_Result_s)   --->   "%xor_ln414_2 = xor i64 %and_ln414, -1" [test_conv/src/test.cpp:62]   --->   Operation 128 'xor' 'xor_ln414_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 129 [1/1] (0.00ns) (grouped into LUT with out node p_Result_s)   --->   "%and_ln414_1 = and i64 %p_Val2_load_1, %xor_ln414_2" [test_conv/src/test.cpp:62]   --->   Operation 129 'and' 'and_ln414_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 130 [1/1] (0.00ns) (grouped into LUT with out node p_Result_s)   --->   "%and_ln414_2 = and i64 %select_ln414_3, %and_ln414" [test_conv/src/test.cpp:62]   --->   Operation 130 'and' 'and_ln414_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 131 [1/1] (1.17ns) (out node of the LUT)   --->   "%p_Result_s = or i64 %and_ln414_1, %and_ln414_2" [test_conv/src/test.cpp:62]   --->   Operation 131 'or' 'p_Result_s' <Predicate = true> <Delay = 1.17> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 132 [1/1] (0.00ns)   --->   "store i64 %p_Result_s, i64* %p_Val2_s" [test_conv/src/test.cpp:60]   --->   Operation 132 'store' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 133 [1/1] (0.00ns)   --->   "br label %.preheader" [test_conv/src/test.cpp:60]   --->   Operation 133 'br' <Predicate = true> <Delay = 0.00>

State 11 <SV = 6> <Delay = 8.75>
ST_11 : Operation 134 [4/5] (8.75ns)   --->   "%out_V_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %out_V_addr)" [test_conv/src/test.cpp:64]   --->   Operation 134 'writeresp' 'out_V_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 12 <SV = 7> <Delay = 8.75>
ST_12 : Operation 135 [3/5] (8.75ns)   --->   "%out_V_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %out_V_addr)" [test_conv/src/test.cpp:64]   --->   Operation 135 'writeresp' 'out_V_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 8> <Delay = 8.75>
ST_13 : Operation 136 [2/5] (8.75ns)   --->   "%out_V_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %out_V_addr)" [test_conv/src/test.cpp:64]   --->   Operation 136 'writeresp' 'out_V_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 9> <Delay = 8.75>
ST_14 : Operation 137 [1/5] (8.75ns)   --->   "%out_V_addr_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %out_V_addr)" [test_conv/src/test.cpp:64]   --->   Operation 137 'writeresp' 'out_V_addr_wr_resp' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 138 [1/1] (0.00ns)   --->   "br label %.preheader49" [test_conv/src/test.cpp:57]   --->   Operation 138 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.466ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('mm') with incoming values : ('mm', test_conv/src/test.cpp:56) [18]  (0.466 ns)

 <State 2>: 6.87ns
The critical path consists of the following:
	'phi' operation ('mm') with incoming values : ('mm', test_conv/src/test.cpp:56) [18]  (0 ns)
	'add' operation ('add_ln64', test_conv/src/test.cpp:64) [24]  (1.32 ns)
	'mul' operation of DSP[27] ('mul_ln64', test_conv/src/test.cpp:64) [27]  (5.55 ns)

 <State 3>: 6.84ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', test_conv/src/test.cpp:57) [31]  (0 ns)
	'add' operation ('add_ln64_1', test_conv/src/test.cpp:64) [39]  (1.54 ns)
	'sub' operation ('sub_ln64', test_conv/src/test.cpp:64) [44]  (1.69 ns)
	'add' operation ('add_ln64_2', test_conv/src/test.cpp:64) [47]  (0 ns)
	'add' operation ('add_ln64_3', test_conv/src/test.cpp:64) [48]  (3.61 ns)

 <State 4>: 1.92ns
The critical path consists of the following:
	'add' operation ('add_ln180', test_conv/src/test.cpp:64) [50]  (1.92 ns)

 <State 5>: 8.75ns
The critical path consists of the following:
	'getelementptr' operation ('out_V_addr', test_conv/src/test.cpp:64) [52]  (0 ns)
	bus request on port 'out_V' (test_conv/src/test.cpp:64) [53]  (8.75 ns)

 <State 6>: 8.75ns
The critical path consists of the following:
	bus access on port 'out_V' (test_conv/src/test.cpp:64) [131]  (8.75 ns)

 <State 7>: 8.75ns
The critical path consists of the following:
	'load' operation ('p_Val2_load', test_conv/src/test.cpp:64) on local variable '__Val2__' [127]  (0 ns)
	bus write on port 'out_V' (test_conv/src/test.cpp:64) [128]  (8.75 ns)

 <State 8>: 2.77ns
The critical path consists of the following:
	'getelementptr' operation ('fm_out_buff_V_addr', test_conv/src/test.cpp:62) [91]  (0 ns)
	'load' operation ('fm_out_buff_V_load', test_conv/src/test.cpp:62) on array 'fm_out_buff_V' [92]  (2.77 ns)

 <State 9>: 8.03ns
The critical path consists of the following:
	'load' operation ('fm_out_buff_V_load', test_conv/src/test.cpp:62) on array 'fm_out_buff_V' [92]  (2.77 ns)
	'icmp' operation ('icmp_ln1494', test_conv/src/test.cpp:14->test_conv/src/test.cpp:62) [94]  (2.14 ns)
	'or' operation ('or_ln1495', test_conv/src/test.cpp:12->test_conv/src/test.cpp:62) [100]  (0 ns)
	'select' operation ('__Val2__', test_conv/src/test.cpp:12->test_conv/src/test.cpp:62) [101]  (0 ns)
	'shl' operation ('shl_ln414', test_conv/src/test.cpp:62) [114]  (3.12 ns)

 <State 10>: 3.65ns
The critical path consists of the following:
	'select' operation ('select_ln414_1', test_conv/src/test.cpp:62) [108]  (0 ns)
	'shl' operation ('shl_ln414_1', test_conv/src/test.cpp:62) [117]  (0 ns)
	'and' operation ('and_ln414', test_conv/src/test.cpp:62) [119]  (2.48 ns)
	'and' operation ('and_ln414_2', test_conv/src/test.cpp:62) [122]  (0 ns)
	'or' operation ('__Result__', test_conv/src/test.cpp:62) [123]  (1.17 ns)

 <State 11>: 8.75ns
The critical path consists of the following:
	bus access on port 'out_V' (test_conv/src/test.cpp:64) [131]  (8.75 ns)

 <State 12>: 8.75ns
The critical path consists of the following:
	bus access on port 'out_V' (test_conv/src/test.cpp:64) [131]  (8.75 ns)

 <State 13>: 8.75ns
The critical path consists of the following:
	bus access on port 'out_V' (test_conv/src/test.cpp:64) [131]  (8.75 ns)

 <State 14>: 8.75ns
The critical path consists of the following:
	bus access on port 'out_V' (test_conv/src/test.cpp:64) [131]  (8.75 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
